{"version":3,"sources":["../../src/Coordinates.js","../../src/CommonUtils.js","../../src/MgrsGraticule.js","App.js","index.js"],"names":["utm","require","utmToLl","easting","northing","zoneNumber","zoneLetter","convertUtmToLatLng","llToUtm","lat","lng","_LLtoUTM","lon","llToMgrs","point","resolution","forward","ll","eccPrimeSquared","N","T","C","A","LongOriginRad","ZoneNumber","Lat","Long","a","eccSquared","k0","LatRad","degToRad","LongRad","Math","floor","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","round","getLetterDesignator","deg","PI","LetterDesignator","TEN_K_MGRS_REGEX","getLineSlope","pointOne","pointTwo","NaN","getAdjustedLatitude","slope","adjustedLongitude","unadjustedLatLong","isNaN","getAdjustedLongitude","adjustedLatitude","Error","getNextMgrsGzdCharacter","char","result","String","fromCharCode","charCodeAt","connectToGzdBoundary","direction","grid","gzdEastLongitude","getGZD","match","geometry","coordinates","gzdWestLongitude","gzdNorthLatitude","gzdSouthLatitude","drawLabel","ctx","labelText","textColor","backgroundColor","labelPosition","textWidth","measureText","width","textHeight","fontBoundingBoxAscent","labelX","x","labelY","y","fillStyle","fillRect","fillText","MGRS_REGEX","MgrsGraticule","map","useMap","Graticule","this","currLatInterval","currLngInterval","defaultOptions","showGrid","showLabel","opacity","color","font","fontColor","dashArray","gzdMinZoom","weight","gridColor","hkColor","hkDashArray","gridFont","gridFontColor","gridDashArray","hundredKMinZoom","tenKMinZoom","oneKMinZoom","options","canvas","document","createElement","classList","add","getPanes","overlayPane","hasChildNodes","appendChild","on","reset","mapSize","getSize","mapLeftTop","containerPointToLayerPoint","style","height","getZoom","mgrsGridInterval","getContext","clearRect","drawGrid","drawGzd","minZoom","lineWidth","strokeStyle","setLineDash","leftTop","containerPointToLatLng","rightBottom","pointPerLat","pointPerLon","parseInt","i","drawLatitudeLine","drawLongitudeLine","tick","lngLeft","lngRight","leftEnd","latLngToContainerPoint","rightEnd","beginPath","moveTo","lineTo","stroke","latTop","latBottom","canvasTop","canvasBottom","TOP_OF_W_SERIES_GZD","TOP_OF_V_SERIES_GZD","BOTTOM_OF_V_SERIES_GZD","RIGHT_TOP_OF_GZD","LEFT_TOP_OF_GZD","LEFT_BOTTOM_OF_GZD","RIGHT_BOTTOM_OF_GZD","TOP_LEFT_OF_32_SERIES_GZD","TOP_LEFT_OF_33X_GZD","BOTTOM_LEFT_OF_33X_GZD","TOP_RIGHT_OF_32W_GZD","TOP_LEFT_OF_34_SERIES_GZD","TOP_LEFT_OF_35X_GZD","BOTTOM_LEFT_OF_35X_GZD","TOP_RIGHT_OF_34W_GZD","TOP_LEFT_OF_35_SERIES_GZD","TOP_LEFT_OF_37X_GZD","BOTTOM_LEFT_OF_37X_GZD","TOP_RIGHT_OF_36W_GZD","drawGzdLabels","longitude","labelLatitude","labelLongitude","gzdLabel","error","labelXy","element","label","toString","notHkLine","nwBoundMgrs","getBounds","getNorthWest","neBoundMgrs","getNorthEast","seBoundMgrs","getSouthEast","swBoundMgrs","getSouthWest","nwGzd","neGzd","seGzd","swGzd","GZD_REGEX","nwLongitudeBand","nwLatitudeBand","neLongitudeBand","swLatitudeBand","longitudeBands","push","initialLongitudeBand","currentLatitudeBand","len","length","flat","longitudeBand","filter","includes","getAllVisibleGzds","visibleGzds","getVizGrids","mapBounds","forEach","gzd","gzdIndex","visibleGridArr","gzdObject","e","gzdWestBoundary","gzdEastBoundary","gzdNorthBoundary","gzdSouthBoundary","effectiveWestBoundary","getWest","effectiveEastBoundary","getEast","effectiveNorthBoundary","getNorth","effectiveSouthBoundary","getSouth","effectiveBounds","L","latLngBounds","latLng","buffer","swCornerUtm","seCornerUtm","nwCornerUtm","neCornerUtm","startingEasting","getCenter","finalEasting","startingNorthing","finalNorthing","ceil","eastingArray","northingArray","eastingElem","eastingIndex","eastArr","northingElem","northingIndex","northArr","gridIntersectionLl","gridIntersectionXy","_drawLine","beginPathCalled","console","trace","skipRemainder","ea","na","labelLl","adjacentLlNorthing","adjacentLlEasting","currentLl","distanceTo","contains","_getLabelText","App","MapContainer","center","zoom","maxZoom","maxNativeZoom","maxBounds","LayersControl","position","BaseLayer","checked","name","TileLayer","url","attribution","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b7b95f13.chunk.js","sourcesContent":["import { forward } from 'mgrs';\r\n\r\nvar utmObj = require('utm-latlng');\r\nvar utm = new utmObj(); // Defaults to WGS-84\r\n\r\nfunction utmToLl(easting, northing, zoneNumber, zoneLetter) {\r\n  return utm.convertUtmToLatLng(easting, northing, zoneNumber, zoneLetter);\r\n}\r\n\r\nfunction llToUtm(lat, lng, resolution = 0) {\r\n  // return utm.convertLatLngToUtm(lat, lng, resolution);\r\n  return _LLtoUTM({ lat: lat, lon: lng });\r\n}\r\n\r\n/**\r\n *\r\n * @param {arr} point [Lng,Lat]\r\n * @param {number} resolution\r\n */\r\nfunction llToMgrs(point, resolution = 1) {\r\n  return forward(point, resolution);\r\n}\r\n\r\nfunction _LLtoUTM(ll) {\r\n  var Lat = ll.lat;\r\n  var Long = ll.lon || ll.lng;\r\n  var a = 6378137.0; //ellip.radius;\r\n  var eccSquared = 0.00669438; //ellip.eccsq;\r\n  var k0 = 0.9996;\r\n  var LongOrigin;\r\n  var eccPrimeSquared;\r\n  var N, T, C, A, M;\r\n  var LatRad = degToRad(Lat);\r\n  var LongRad = degToRad(Long);\r\n  var LongOriginRad;\r\n  var ZoneNumber;\r\n  // (int)\r\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\r\n\r\n  //Make sure the longitude 180.00 is in Zone 60\r\n  if (Long === 180) {\r\n    ZoneNumber = 60;\r\n  }\r\n\r\n  // Special zone for Norway\r\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\r\n    ZoneNumber = 32;\r\n  }\r\n\r\n  // Special zones for Svalbard\r\n  if (Lat >= 72.0 && Lat < 84.0) {\r\n    if (Long >= 0.0 && Long < 9.0) {\r\n      ZoneNumber = 31;\r\n    } else if (Long >= 9.0 && Long < 21.0) {\r\n      ZoneNumber = 33;\r\n    } else if (Long >= 21.0 && Long < 33.0) {\r\n      ZoneNumber = 35;\r\n    } else if (Long >= 33.0 && Long < 42.0) {\r\n      ZoneNumber = 37;\r\n    }\r\n  }\r\n\r\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\r\n  // in middle of\r\n  // zone\r\n  LongOriginRad = degToRad(LongOrigin);\r\n\r\n  eccPrimeSquared = eccSquared / (1 - eccSquared);\r\n\r\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\r\n  T = Math.tan(LatRad) * Math.tan(LatRad);\r\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\r\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\r\n\r\n  M =\r\n    a *\r\n    ((1 - eccSquared / 4 - (3 * eccSquared * eccSquared) / 64 - (5 * eccSquared * eccSquared * eccSquared) / 256) *\r\n      LatRad -\r\n      ((3 * eccSquared) / 8 + (3 * eccSquared * eccSquared) / 32 + (45 * eccSquared * eccSquared * eccSquared) / 1024) *\r\n        Math.sin(2 * LatRad) +\r\n      ((15 * eccSquared * eccSquared) / 256 + (45 * eccSquared * eccSquared * eccSquared) / 1024) *\r\n        Math.sin(4 * LatRad) -\r\n      ((35 * eccSquared * eccSquared * eccSquared) / 3072) * Math.sin(6 * LatRad));\r\n\r\n  var UTMEasting =\r\n    k0 *\r\n      N *\r\n      (A +\r\n        ((1 - T + C) * A * A * A) / 6.0 +\r\n        ((5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A) / 120.0) +\r\n    500000.0;\r\n\r\n  var UTMNorthing =\r\n    k0 *\r\n    (M +\r\n      N *\r\n        Math.tan(LatRad) *\r\n        ((A * A) / 2 +\r\n          ((5 - T + 9 * C + 4 * C * C) * A * A * A * A) / 24.0 +\r\n          ((61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A) / 720.0));\r\n  if (Lat < 0.0) {\r\n    UTMNorthing += 10000000.0; //10000000 meter offset for\r\n    // southern hemisphere\r\n  }\r\n\r\n  return {\r\n    northing: Math.round(UTMNorthing),\r\n    easting: Math.round(UTMEasting),\r\n    zoneNumber: ZoneNumber,\r\n    zoneLetter: getLetterDesignator(Lat),\r\n  };\r\n}\r\n\r\n/**\r\n * Conversion from degrees to radians.\r\n *\r\n * @private\r\n * @param {number} deg the angle in degrees.\r\n * @return {number} the angle in radians.\r\n */\r\nfunction degToRad(deg) {\r\n  return deg * (Math.PI / 180.0);\r\n}\r\n\r\n/**\r\n * Calculates the MGRS letter designator for the given latitude.\r\n *\r\n * @private\r\n * @param {number} lat The latitude in WGS84 to get the letter designator\r\n *     for.\r\n * @return {char} The letter designator.\r\n */\r\nfunction getLetterDesignator(lat) {\r\n  //This is here as an error flag to show that the Latitude is\r\n  //outside MGRS limits\r\n  var LetterDesignator = 'Z';\r\n\r\n  if (84 >= lat && lat >= 72) {\r\n    LetterDesignator = 'X';\r\n  } else if (72 > lat && lat >= 64) {\r\n    LetterDesignator = 'W';\r\n  } else if (64 > lat && lat >= 56) {\r\n    LetterDesignator = 'V';\r\n  } else if (56 > lat && lat >= 48) {\r\n    LetterDesignator = 'U';\r\n  } else if (48 > lat && lat >= 40) {\r\n    LetterDesignator = 'T';\r\n  } else if (40 > lat && lat >= 32) {\r\n    LetterDesignator = 'S';\r\n  } else if (32 > lat && lat >= 24) {\r\n    LetterDesignator = 'R';\r\n  } else if (24 > lat && lat >= 16) {\r\n    LetterDesignator = 'Q';\r\n  } else if (16 > lat && lat >= 8) {\r\n    LetterDesignator = 'P';\r\n  } else if (8 > lat && lat >= 0) {\r\n    LetterDesignator = 'N';\r\n  } else if (0 > lat && lat >= -8) {\r\n    LetterDesignator = 'M';\r\n  } else if (-8 > lat && lat >= -16) {\r\n    LetterDesignator = 'L';\r\n  } else if (-16 > lat && lat >= -24) {\r\n    LetterDesignator = 'K';\r\n  } else if (-24 > lat && lat >= -32) {\r\n    LetterDesignator = 'J';\r\n  } else if (-32 > lat && lat >= -40) {\r\n    LetterDesignator = 'H';\r\n  } else if (-40 > lat && lat >= -48) {\r\n    LetterDesignator = 'G';\r\n  } else if (-48 > lat && lat >= -56) {\r\n    LetterDesignator = 'F';\r\n  } else if (-56 > lat && lat >= -64) {\r\n    LetterDesignator = 'E';\r\n  } else if (-64 > lat && lat >= -72) {\r\n    LetterDesignator = 'D';\r\n  } else if (-72 > lat && lat >= -80) {\r\n    LetterDesignator = 'C';\r\n  }\r\n  return LetterDesignator;\r\n}\r\n\r\nexport { utmToLl, llToUtm, llToMgrs };\r\n","import { getGZD } from 'gzd-utils';\r\nimport { forward } from 'mgrs';\r\n\r\n// The following indicies are used to indentify coordinates returned from gzd-utils\r\nconst SW_INDEX = 0;\r\nconst NW_INDEX = 1;\r\nconst NE_INDEX = 2;\r\n\r\nconst LONGITUDE_INDEX = 0;\r\nconst LATITUDE_INDEX = 1;\r\n\r\nconst TEN_K_MGRS_REGEX = /([0-9]+[A-Z])([A-Z]{2})([0-9]{2})/;\r\nconst GZD_INDEX = 1;\r\n/**\r\n *\r\n * @param {*} pointOne\r\n * @param {*} pointTwo\r\n */\r\nfunction getLineSlope(pointOne, pointTwo) {\r\n  if (pointOne === pointTwo) {\r\n    return 0;\r\n  } else if (pointOne.lng === pointTwo.lng) {\r\n    return NaN;\r\n  } else {\r\n    return (pointTwo.lat - pointOne.lat) / (pointTwo.lng - pointOne.lng);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} slope\r\n * @param {*} adjustedLongitude\r\n * @param {*} unadjustedLatLong\r\n */\r\nfunction getAdjustedLatitude(slope, adjustedLongitude, unadjustedLatLong) {\r\n  let result;\r\n  if (!isNaN(slope)) {\r\n    result = unadjustedLatLong.lat + slope * (adjustedLongitude - unadjustedLatLong.lng);\r\n  } else {\r\n    result = unadjustedLatLong.lat;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} slope\r\n * @param {*} adjustedLongitude\r\n * @param {*} unadjustedLatLong\r\n */\r\nfunction getAdjustedLongitude(slope, adjustedLatitude, unadjustedLatLong) {\r\n  let result;\r\n  if (slope === 0) {\r\n    const e = new Error('getAdjustedLongitude: Zero slope received');\r\n    throw e;\r\n  } else if (!isNaN(slope)) {\r\n    result = (adjustedLatitude - unadjustedLatLong.lat + slope * unadjustedLatLong.lng) / slope;\r\n  } else {\r\n    result = unadjustedLatLong.lng;\r\n  }\r\n\r\n  return result;\r\n}\r\n/**\r\n *\r\n * @param {string} char\r\n */\r\nfunction getNextMgrsGzdCharacter(char) {\r\n  // I and O are not valid characters for MGRS, so get the next\r\n  // character recursively\r\n  const result = String.fromCharCode(char.charCodeAt(0) + 1);\r\n  if (result === 'I' || result === 'O') {\r\n    return getNextMgrsGzdCharacter(result);\r\n  } else {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * Given two points and a direction, will return a new point along the\r\n * line generated by pointOne and pointTwo which rests on the GZD boundary\r\n * @param {Dict} pointOne\r\n * @param {Dict} pointTwo\r\n * @param {String} direction\r\n */\r\nfunction connectToGzdBoundary(pointOne, pointTwo, direction) {\r\n  const slope = getLineSlope(pointOne, pointTwo);\r\n  // 10k mgrs resolution grid - e.g. 18TVR90\r\n  const grid = forward([pointOne.lng, pointOne.lat], 1);\r\n  let adjustedLongitude;\r\n  let adjustedLatitude;\r\n\r\n  switch (direction) {\r\n    case 'East':\r\n      const gzdEastLongitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][NE_INDEX][\r\n        LONGITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLatitude = getAdjustedLatitude(slope, gzdEastLongitude, pointTwo);\r\n      adjustedLongitude = gzdEastLongitude;\r\n\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n\r\n    case 'West':\r\n      const gzdWestLongitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][NW_INDEX][\r\n        LONGITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLatitude = getAdjustedLatitude(slope, gzdWestLongitude, pointTwo);\r\n\r\n      adjustedLongitude = gzdWestLongitude;\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n    case 'North':\r\n      const gzdNorthLatitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][NW_INDEX][\r\n        LATITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLongitude = getAdjustedLongitude(slope, gzdNorthLatitude, pointTwo);\r\n\r\n      // Handle a special case where the west most 100k easting line in the 32V GZD extends\r\n      // west of the boundary\r\n      const WEST_LNG_32V_BOUNDARY = 3;\r\n      if (\r\n        grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX] === '31V' &&\r\n        adjustedLongitude < WEST_LNG_32V_BOUNDARY &&\r\n        pointTwo.lng > WEST_LNG_32V_BOUNDARY\r\n      ) {\r\n        adjustedLatitude = getAdjustedLatitude(slope, WEST_LNG_32V_BOUNDARY, pointTwo);\r\n        adjustedLongitude = WEST_LNG_32V_BOUNDARY;\r\n      } else {\r\n        adjustedLatitude = gzdNorthLatitude;\r\n      }\r\n\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n\r\n    case 'South':\r\n      const gzdSouthLatitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][SW_INDEX][\r\n        LATITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLongitude = getAdjustedLongitude(slope, gzdSouthLatitude, pointTwo);\r\n\r\n      adjustedLatitude = gzdSouthLatitude;\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n\r\n    default:\r\n      // TODO - lat/lng are undefined if we use this return statement\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n  }\r\n}\r\n\r\n// TODO - REFACTOR HACK\r\nfunction getAllVisibleGzds(nwGzd, neGzd, seGzd, swGzd) {\r\n  const GZD_REGEX = /([0-9]+)([A-Z])/;\r\n  const LONGITUDE_BAND_INDEX = 1;\r\n  const LATITUDE_BAND_INDEX = 2;\r\n\r\n  // Short circuit\r\n  if (nwGzd === seGzd) {\r\n    return [nwGzd];\r\n  }\r\n  const nwLongitudeBand = parseInt(nwGzd.match(GZD_REGEX)[LONGITUDE_BAND_INDEX]);\r\n  const nwLatitudeBand = nwGzd.match(GZD_REGEX)[LATITUDE_BAND_INDEX];\r\n\r\n  const neLongitudeBand = parseInt(neGzd.match(GZD_REGEX)[LONGITUDE_BAND_INDEX]);\r\n\r\n  const swLatitudeBand = swGzd.match(GZD_REGEX)[LATITUDE_BAND_INDEX];\r\n\r\n  let result = [];\r\n\r\n  const longitudeBands = []; // container for the formatted GZDs\r\n\r\n  // If the NW GZD is 32V then also include the relevant 31 series GZDs below it\r\n  // This ensures that grids are displayed (since 32V is larger at the expense of 31V)\r\n  if (nwGzd === '32V') {\r\n    longitudeBands.push('31');\r\n  }\r\n\r\n  // We span at least two vertical bands\r\n  if (nwLongitudeBand !== neLongitudeBand) {\r\n    for (let i = nwLongitudeBand; i <= neLongitudeBand; i++) {\r\n      longitudeBands.push(i.toString());\r\n    }\r\n    if (nwLatitudeBand !== swLatitudeBand) {\r\n      const initialLongitudeBand = [...longitudeBands];\r\n\r\n      let currentLatitudeBand = swLatitudeBand;\r\n      while (currentLatitudeBand <= nwLatitudeBand) {\r\n        const len = initialLongitudeBand.length;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n          result.push(initialLongitudeBand[i] + currentLatitudeBand);\r\n        }\r\n\r\n        currentLatitudeBand = getNextMgrsGzdCharacter(currentLatitudeBand);\r\n      }\r\n\r\n      result = result.flat();\r\n    } else {\r\n      // Append the alpha character to the array of GZDs\r\n      const len = longitudeBands.length;\r\n      for (let i = 0; i < len; i++) {\r\n        longitudeBands[i] = longitudeBands[i].toString() + nwLatitudeBand;\r\n      }\r\n      result = longitudeBands;\r\n    }\r\n  } else {\r\n    // We span a single vertical band\r\n    let currentLatitudeBand = swLatitudeBand;\r\n    const longitudeBand = []; // Container for the formatted GZDs\r\n\r\n    while (currentLatitudeBand <= nwLatitudeBand) {\r\n      longitudeBand.push(nwLongitudeBand.toString() + currentLatitudeBand);\r\n\r\n      currentLatitudeBand = getNextMgrsGzdCharacter(currentLatitudeBand);\r\n    }\r\n    result = longitudeBand;\r\n  }\r\n  // Remove non-existant X series GZDs around Svalbard\r\n  result = result.filter(function (a) {\r\n    return a !== '32X' && a !== '34X' && a !== '36X';\r\n  });\r\n\r\n  // Add 32V if 31W is visible\r\n  // This ensures that grids are displayed (since 32V is larger at the expense of 31V)\r\n  if (result.includes('31W') && !result.includes('32V')) {\r\n    result.push('32V');\r\n  }\r\n\r\n  // Handles a special case where 32V can be the NW and NE GZD, but the algorithm\r\n  // doesn't show the 31U GZD\r\n  if (neGzd === '32V' && seGzd === '32U' && !result.includes('31U')) {\r\n    result.push('31U');\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction drawLabel(ctx, labelText, textColor, backgroundColor, labelPosition) {\r\n  const textWidth = ctx.measureText(labelText).width;\r\n  const textHeight = ctx.measureText(labelText).fontBoundingBoxAscent;\r\n\r\n  // Calculate label xy position\r\n  const labelX = labelPosition.x;\r\n  const labelY = labelPosition.y;\r\n\r\n  ctx.fillStyle = backgroundColor;\r\n  // Magic numbers will centre the rectangle over the text\r\n  ctx.fillRect(labelX - textWidth / 2 - 1, labelY - textHeight + 1, textWidth + 3, textHeight + 2);\r\n  ctx.fillStyle = textColor;\r\n  ctx.fillText(labelText, labelX - textWidth / 2, labelY);\r\n}\r\n\r\nexport {\r\n  connectToGzdBoundary,\r\n  drawLabel,\r\n  getAdjustedLatitude,\r\n  getAdjustedLongitude,\r\n  getAllVisibleGzds,\r\n  getLineSlope,\r\n  getNextMgrsGzdCharacter,\r\n};\r\n","import { utmToLl, llToUtm, llToMgrs } from './Coordinates';\r\nimport { Layer } from 'leaflet';\r\nimport { useMap } from 'react-leaflet';\r\n\r\nimport {\r\n  connectToGzdBoundary,\r\n  drawLabel,\r\n  getAdjustedLatitude,\r\n  getAdjustedLongitude,\r\n  getAllVisibleGzds,\r\n  getLineSlope,\r\n} from './CommonUtils';\r\nimport { getGZD } from 'gzd-utils';\r\n\r\n// The following indicies are used to indentify coordinates returned from gzd-utils\r\nconst SW_INDEX = 0;\r\nconst NW_INDEX = 1;\r\nconst NE_INDEX = 2;\r\n\r\nconst LATITUDE_INDEX = 1;\r\nconst LONGITUDE_INDEX = 0;\r\n\r\nconst MGRS_REGEX = /([0-9]+[A-Z])([A-Z]{2})(\\d+)/;\r\nconst GZD_INDEX = 1;\r\nconst HK_INDEX = 2;\r\nconst GRID_INDEX = 3;\r\n\r\nconst MgrsGraticule = () => {\r\n  let map = useMap();\r\n  let g = new Graticule(map);\r\n\r\n  return null;\r\n};\r\n\r\nclass Graticule {\r\n  constructor(map) {\r\n    this.currLatInterval = 8;\r\n    this.currLngInterval = 6;\r\n\r\n    this.defaultOptions = {\r\n      showGrid: true,\r\n      showLabel: true,\r\n      opacity: 10,\r\n      color: '#888888',\r\n      font: '14px Courier New',\r\n      fontColor: '#FFF',\r\n      dashArray: [6, 6],\r\n      gzdMinZoom: 3,\r\n      weight: 1.5,\r\n      gridColor: '#000',\r\n      hkColor: '#990000', //Font background colour and dash colour\r\n      hkDashArray: [4, 4],\r\n      gridFont: '14px Courier New',\r\n      gridFontColor: '#FFF',\r\n      gridDashArray: [],\r\n      hundredKMinZoom: 6,\r\n      tenKMinZoom: 9,\r\n      oneKMinZoom: 12,\r\n    };\r\n\r\n    this.options = this.defaultOptions;\r\n    this.map = map;\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.classList.add('leaflet-zoom-animated');\r\n\r\n    // Add the canvas only if it hasn't already been added\r\n    if (!this.map.getPanes().overlayPane.hasChildNodes()) {\r\n      this.map.getPanes().overlayPane.appendChild(this.canvas);\r\n    }\r\n\r\n    this.map.on('viewreset', this.reset, this);\r\n    this.map.on('move', this.reset, this);\r\n\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    const mapSize = this.map.getSize();\r\n    const mapLeftTop = this.map.containerPointToLayerPoint([0, 0]);\r\n\r\n    this.canvas.style['transform'] = `translate3d(${mapLeftTop.x}px,${mapLeftTop.y}px,0)`;\r\n\r\n    this.canvas.width = mapSize.x;\r\n    this.canvas.height = mapSize.y;\r\n\r\n    if (this.map.getZoom() > this.options.oneKMinZoom) {\r\n      this.mgrsGridInterval = 1000; //1k resolution\r\n    } else if (this.map.getZoom() > this.options.tenKMinZoom) {\r\n      this.mgrsGridInterval = 10000; //10k resolution\r\n    } else if (this.map.getZoom() > this.options.hundredKMinZoom) {\r\n      this.mgrsGridInterval = 100000; //100k resolution\r\n    } else {\r\n      this.mgrsGridInterval = null;\r\n    }\r\n\r\n    let ctx = this.canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.drawGrid(ctx);\r\n    this.drawGzd(ctx);\r\n  }\r\n\r\n  drawGzd(ctx) {\r\n    if (!this.canvas || !this.map) {\r\n      return;\r\n    }\r\n\r\n    if (this.map.getZoom() < this.options.minZoom) {\r\n      return;\r\n    }\r\n\r\n    ctx.lineWidth = this.options.weight;\r\n    ctx.strokeStyle = this.options.color;\r\n    ctx.fillStyle = this.options.color;\r\n    ctx.setLineDash(this.options.dashArray);\r\n    if (this.options.font) {\r\n      ctx.font = this.options.font;\r\n    }\r\n\r\n    let leftTop = this.map.containerPointToLatLng({ x: 0, y: 0 });\r\n    let rightBottom = this.map.containerPointToLatLng({\r\n      x: this.canvas.width,\r\n      y: this.canvas.height,\r\n    });\r\n\r\n    let pointPerLat = (leftTop.lat - rightBottom.lat) / (this.canvas.height * 0.2);\r\n    let pointPerLon = (rightBottom.lng - leftTop.lng) / (this.canvas.width * 0.2);\r\n\r\n    if (isNaN(pointPerLat) || isNaN(pointPerLon)) {\r\n      return;\r\n    }\r\n\r\n    if (pointPerLat < 1) {\r\n      pointPerLat = 1;\r\n    }\r\n    if (pointPerLon < 1) {\r\n      pointPerLon = 1;\r\n    }\r\n\r\n    if (rightBottom.lat < -90) {\r\n      rightBottom.lat = -90;\r\n    } else {\r\n      rightBottom.lat = parseInt(rightBottom.lat - pointPerLat, 10);\r\n    }\r\n\r\n    if (leftTop.lat > 90) {\r\n      leftTop.lat = 90;\r\n    } else {\r\n      leftTop.lat = parseInt(leftTop.lat + pointPerLat, 10);\r\n    }\r\n\r\n    if (leftTop.lng > 0 && rightBottom.lng < 0) {\r\n      rightBottom.lng += 360;\r\n    }\r\n    rightBottom.lng = parseInt(rightBottom.lng + pointPerLon, 10);\r\n    leftTop.lng = parseInt(leftTop.lng - pointPerLon, 10);\r\n\r\n    // Northern hemisphere\r\n    for (let i = this.currLatInterval; i <= leftTop.lat; i += this.currLatInterval) {\r\n      if (i >= rightBottom.lat) {\r\n        // Handle 'X' MGRS Zone - Do not need it for the southern equivalent 'C'\r\n        if (i === 80) {\r\n          i = 84;\r\n        }\r\n        this.drawLatitudeLine(ctx, i, leftTop.lng, rightBottom.lng);\r\n      }\r\n    }\r\n\r\n    // Southern hemisphere\r\n    for (let i = 0; i >= rightBottom.lat; i -= this.currLatInterval) {\r\n      if (i <= leftTop.lat) {\r\n        this.drawLatitudeLine(ctx, i, leftTop.lng, rightBottom.lng);\r\n      }\r\n    }\r\n\r\n    // HACK - Add six to the right bottom lng to make sure the East 31V boundary is displayed at all times\r\n    for (let i = -180; i <= rightBottom.lng + 6; i += this.currLngInterval) {\r\n      this.drawLongitudeLine(ctx, i, leftTop.lat, rightBottom.lat);\r\n    }\r\n  }\r\n\r\n  drawLatitudeLine(ctx, tick, lngLeft, lngRight) {\r\n    const leftEnd = this.map.latLngToContainerPoint({\r\n      lat: tick,\r\n      lng: lngLeft,\r\n    });\r\n\r\n    const rightEnd = this.map.latLngToContainerPoint({\r\n      lat: tick,\r\n      lng: lngRight,\r\n    });\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(leftEnd.x, leftEnd.y);\r\n    ctx.lineTo(rightEnd.x, rightEnd.y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  drawLongitudeLine(ctx, tick, latTop, latBottom) {\r\n    if (latTop >= 84) {\r\n      latTop = 84; // Ensure GZD vertical lines do not extend into the arctic\r\n    }\r\n\r\n    if (latBottom <= -80) {\r\n      latBottom = -80; // Ensure GZD vertical lines do not extend into the antarctic\r\n    }\r\n\r\n    const canvasTop = this.map.latLngToContainerPoint({\r\n      lat: latTop,\r\n      lng: tick,\r\n    });\r\n\r\n    const canvasBottom = this.map.latLngToContainerPoint({\r\n      lat: latBottom,\r\n      lng: tick,\r\n    });\r\n\r\n    const TOP_OF_W_SERIES_GZD = 72;\r\n\r\n    ctx.beginPath();\r\n    // Handle Norway\r\n    if (tick === 6) {\r\n      const TOP_OF_V_SERIES_GZD = 64;\r\n      const BOTTOM_OF_V_SERIES_GZD = 56;\r\n      const RIGHT_OF_31_SERIES_GZD = 3;\r\n\r\n      const RIGHT_TOP_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: TOP_OF_V_SERIES_GZD,\r\n        lng: tick,\r\n      });\r\n\r\n      const LEFT_TOP_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: TOP_OF_V_SERIES_GZD,\r\n        lng: RIGHT_OF_31_SERIES_GZD,\r\n      });\r\n\r\n      const LEFT_BOTTOM_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: BOTTOM_OF_V_SERIES_GZD,\r\n        lng: RIGHT_OF_31_SERIES_GZD,\r\n      });\r\n\r\n      const RIGHT_BOTTOM_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: BOTTOM_OF_V_SERIES_GZD,\r\n        lng: tick,\r\n      });\r\n      if (latTop > TOP_OF_V_SERIES_GZD && latBottom > BOTTOM_OF_V_SERIES_GZD) {\r\n        // Top segment only\r\n        // Do not draw through Svalbard\r\n        if (latTop > TOP_OF_W_SERIES_GZD) {\r\n          const TOP_LEFT_OF_32_SERIES_GZD = this.map.latLngToContainerPoint({\r\n            lat: TOP_OF_W_SERIES_GZD,\r\n            lng: tick,\r\n          });\r\n          ctx.moveTo(TOP_LEFT_OF_32_SERIES_GZD.x, TOP_LEFT_OF_32_SERIES_GZD.y);\r\n        } else {\r\n          ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        }\r\n\r\n        ctx.lineTo(RIGHT_TOP_OF_GZD.x, RIGHT_TOP_OF_GZD.y);\r\n\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, LEFT_TOP_OF_GZD.y);\r\n\r\n        ctx.lineTo(LEFT_TOP_OF_GZD.x, canvasBottom.y);\r\n      } else if (\r\n        //Bottom segment only\r\n        latTop < TOP_OF_V_SERIES_GZD &&\r\n        latBottom < BOTTOM_OF_V_SERIES_GZD\r\n      ) {\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, canvasTop.y);\r\n\r\n        ctx.lineTo(LEFT_BOTTOM_OF_GZD.x, LEFT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.moveTo(RIGHT_BOTTOM_OF_GZD.x, RIGHT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.lineTo(RIGHT_BOTTOM_OF_GZD.x, canvasBottom.y);\r\n      } else if (\r\n        // Entire thing\r\n        latTop >= TOP_OF_V_SERIES_GZD &&\r\n        latBottom <= BOTTOM_OF_V_SERIES_GZD\r\n      ) {\r\n        // Do not draw through Svalbard\r\n        if (latTop > TOP_OF_W_SERIES_GZD) {\r\n          const TOP_LEFT_OF_32_SERIES_GZD = this.map.latLngToContainerPoint({\r\n            lat: TOP_OF_W_SERIES_GZD,\r\n            lng: tick,\r\n          });\r\n          ctx.moveTo(TOP_LEFT_OF_32_SERIES_GZD.x, TOP_LEFT_OF_32_SERIES_GZD.y);\r\n        } else {\r\n          ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        }\r\n\r\n        ctx.lineTo(RIGHT_TOP_OF_GZD.x, RIGHT_TOP_OF_GZD.y);\r\n\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, LEFT_TOP_OF_GZD.y);\r\n\r\n        ctx.lineTo(LEFT_BOTTOM_OF_GZD.x, LEFT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.moveTo(RIGHT_TOP_OF_GZD.x, LEFT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.lineTo(RIGHT_TOP_OF_GZD.x, canvasBottom.y);\r\n      } else if (\r\n        // Modified vertical only\r\n        latTop <= TOP_OF_V_SERIES_GZD &&\r\n        latBottom >= BOTTOM_OF_V_SERIES_GZD\r\n      ) {\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, canvasTop.y);\r\n\r\n        ctx.lineTo(LEFT_BOTTOM_OF_GZD.x, canvasBottom.y);\r\n      }\r\n    } else if (tick === 12) {\r\n      if (latTop > TOP_OF_W_SERIES_GZD && latTop <= 84) {\r\n        // Handle Svalbard\r\n        const TOP_LEFT_OF_33X_GZD = this.map.latLngToContainerPoint({\r\n          lat: latTop,\r\n          lng: 9,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_33X_GZD.x, TOP_LEFT_OF_33X_GZD.y);\r\n\r\n        const BOTTOM_LEFT_OF_33X_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: 9,\r\n        });\r\n\r\n        ctx.lineTo(BOTTOM_LEFT_OF_33X_GZD.x, BOTTOM_LEFT_OF_33X_GZD.y);\r\n\r\n        const TOP_RIGHT_OF_32W_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n\r\n        ctx.moveTo(TOP_RIGHT_OF_32W_GZD.x, TOP_RIGHT_OF_32W_GZD.y);\r\n\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      } else {\r\n        // Normal use case\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      }\r\n    } else if (tick === 18) {\r\n      // Do not draw through Svalbard\r\n      if (latTop > TOP_OF_W_SERIES_GZD) {\r\n        const TOP_LEFT_OF_34_SERIES_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_34_SERIES_GZD.x, TOP_LEFT_OF_34_SERIES_GZD.y);\r\n      } else {\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n      }\r\n      ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n    } else if (tick === 24) {\r\n      if (latTop > TOP_OF_W_SERIES_GZD && latTop <= 84) {\r\n        // Handle Svalbard\r\n        const TOP_LEFT_OF_35X_GZD = this.map.latLngToContainerPoint({\r\n          lat: latTop,\r\n          lng: 21,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_35X_GZD.x, TOP_LEFT_OF_35X_GZD.y);\r\n\r\n        const BOTTOM_LEFT_OF_35X_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: 21,\r\n        });\r\n\r\n        ctx.lineTo(BOTTOM_LEFT_OF_35X_GZD.x, BOTTOM_LEFT_OF_35X_GZD.y);\r\n\r\n        const TOP_RIGHT_OF_34W_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n\r\n        ctx.moveTo(TOP_RIGHT_OF_34W_GZD.x, TOP_RIGHT_OF_34W_GZD.y);\r\n\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      } else {\r\n        // Normal use case\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      }\r\n    } else if (tick === 30) {\r\n      // Do not draw through Svalbard\r\n      if (latTop > TOP_OF_W_SERIES_GZD) {\r\n        const TOP_LEFT_OF_35_SERIES_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_35_SERIES_GZD.x, TOP_LEFT_OF_35_SERIES_GZD.y);\r\n      } else {\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n      }\r\n      ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n    } else if (tick === 36) {\r\n      if (latTop > TOP_OF_W_SERIES_GZD && latTop <= 84) {\r\n        // Handle Svalbard\r\n        const TOP_LEFT_OF_37X_GZD = this.map.latLngToContainerPoint({\r\n          lat: latTop,\r\n          lng: 33,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_37X_GZD.x, TOP_LEFT_OF_37X_GZD.y);\r\n\r\n        const BOTTOM_LEFT_OF_37X_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: 33,\r\n        });\r\n\r\n        ctx.lineTo(BOTTOM_LEFT_OF_37X_GZD.x, BOTTOM_LEFT_OF_37X_GZD.y);\r\n\r\n        const TOP_RIGHT_OF_36W_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n\r\n        ctx.moveTo(TOP_RIGHT_OF_36W_GZD.x, TOP_RIGHT_OF_36W_GZD.y);\r\n\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      } else {\r\n        // Normal use case\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      }\r\n    }\r\n    // The rest of the world...\r\n    else {\r\n      ctx.moveTo(canvasTop.x, canvasTop.y);\r\n      ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n    }\r\n    ctx.stroke();\r\n\r\n    this.drawGzdLabels(ctx, tick);\r\n  }\r\n\r\n  /** This function encapsulates drawing labels for GZDs\r\n   *\r\n   * @param {Obj} ctx - The HTML5 canvas' context\r\n   * @param {Int} longitude - The longitude (representing a boundary of a GZD) for which needs labels drawn for\r\n   */\r\n  drawGzdLabels(ctx, longitude) {\r\n    // -76 = middle latitude of the 'C' band - place the label in the middle\r\n    for (let labelLatitude = -76; labelLatitude < 84; labelLatitude += 8) {\r\n      let labelLongitude;\r\n      if (labelLatitude === 60) {\r\n        if (longitude === 0) {\r\n          //31V\r\n          labelLongitude = 1.5;\r\n        } else if (longitude === 6) {\r\n          //32V\r\n          labelLongitude = 7.5;\r\n        } else {\r\n          labelLongitude = longitude + 3;\r\n        }\r\n      } else if (labelLatitude === 76) {\r\n        if (longitude === 0) {\r\n          //31X\r\n          labelLongitude = 4.5;\r\n        } else if (longitude === 12) {\r\n          //33X\r\n          labelLongitude = 15;\r\n        } else if (longitude === 24) {\r\n          //35X\r\n          labelLongitude = 27;\r\n        } else if (longitude === 36) {\r\n          //37X\r\n          labelLongitude = 37.5;\r\n        } else {\r\n          labelLongitude = longitude + 3;\r\n        }\r\n      } else {\r\n        // Rest of the world...\r\n        labelLongitude = longitude + 3;\r\n      }\r\n\r\n      let gzdLabel;\r\n      try {\r\n        gzdLabel = llToMgrs([labelLongitude, labelLatitude], 1).match(MGRS_REGEX)[GZD_INDEX];\r\n      } catch (error) {\r\n        return; //Invalid MGRS value returned, so no need to try to display a label\r\n      }\r\n\r\n      // Don't want to display duplicates of the following zones\r\n      if (\r\n        !(gzdLabel === '33X' && longitude === 6) &&\r\n        !(gzdLabel === '35X' && longitude === 18) &&\r\n        !(gzdLabel === '37X' && longitude === 30)\r\n      ) {\r\n        const labelXy = this.map.latLngToContainerPoint({\r\n          lat: labelLatitude,\r\n          lng: labelLongitude,\r\n        });\r\n\r\n        drawLabel(ctx, gzdLabel, this.options.fontColor, this.options.color, labelXy);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {String} element - A UTM easting or northing element\r\n   */\r\n  _getLabelText(element) {\r\n    // Divide by 1000 so that the labels will always be correct (10k vs 1k resolution)\r\n    let label = ((element % 100000) / 1000).toString();\r\n\r\n    if (this.mgrsGridInterval === 10000 && label === '0') {\r\n      label = '00';\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  _drawLine(ctx, notHkLine) {\r\n    if (notHkLine) {\r\n      ctx.setLineDash(this.options.gridDashArray);\r\n      ctx.lineWidth = this.options.weight + 1;\r\n      ctx.strokeStyle = this.options.gridFontColor;\r\n      ctx.stroke();\r\n      ctx.lineWidth = this.options.weight;\r\n      ctx.strokeStyle = this.options.gridColor;\r\n      ctx.stroke();\r\n    } else {\r\n      ctx.lineWidth = this.options.weight;\r\n      ctx.strokeStyle = this.options.hkColor;\r\n      ctx.setLineDash(this.options.hkDashArray);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  getVizGrids() {\r\n    const nwBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getNorthWest()['lng'], this.map.getBounds().getNorthWest()['lat']],\r\n      1\r\n    );\r\n    const neBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getNorthEast()['lng'], this.map.getBounds().getNorthEast()['lat']],\r\n      1\r\n    );\r\n    const seBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getSouthEast()['lng'], this.map.getBounds().getSouthEast()['lat']],\r\n      1\r\n    );\r\n    const swBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getSouthWest()['lng'], this.map.getBounds().getSouthWest()['lat']],\r\n      1\r\n    );\r\n\r\n    let visibleGrids = getAllVisibleGzds(\r\n      nwBoundMgrs.match(MGRS_REGEX)[GZD_INDEX],\r\n      neBoundMgrs.match(MGRS_REGEX)[GZD_INDEX],\r\n      seBoundMgrs.match(MGRS_REGEX)[GZD_INDEX],\r\n      swBoundMgrs.match(MGRS_REGEX)[GZD_INDEX]\r\n    );\r\n\r\n    return visibleGrids;\r\n  }\r\n\r\n  drawGrid(ctx) {\r\n    if (!this.canvas || !this.map) {\r\n      return;\r\n    }\r\n\r\n    if (this.map.getZoom() < this.options.hundredKMinZoom) {\r\n      return;\r\n    }\r\n\r\n    ctx.lineWidth = this.options.weight + 0.75;\r\n    ctx.strokeStyle = this.options.gridFontColor;\r\n    ctx.fillStyle = this.options.gridColor;\r\n    ctx.setLineDash(this.options.dashArray);\r\n    ctx.font = this.options.gridFont;\r\n    const visibleGzds = this.getVizGrids();\r\n\r\n    const mapBounds = this.map.getBounds();\r\n\r\n    visibleGzds.forEach((gzd, gzdIndex, visibleGridArr) => {\r\n      let gzdObject;\r\n      try {\r\n        gzdObject = getGZD(gzd);\r\n      } catch (e) {\r\n        return;\r\n      }\r\n\r\n      const gzdWestBoundary = gzdObject['geometry']['coordinates'][0][NW_INDEX][LONGITUDE_INDEX];\r\n      const gzdEastBoundary = gzdObject['geometry']['coordinates'][0][NE_INDEX][LONGITUDE_INDEX];\r\n      const gzdNorthBoundary = gzdObject['geometry']['coordinates'][0][NW_INDEX][LATITUDE_INDEX];\r\n      const gzdSouthBoundary = gzdObject['geometry']['coordinates'][0][SW_INDEX][LATITUDE_INDEX];\r\n\r\n      // If drawing HK grids, just draw the entire GZD regardless\r\n      let effectiveWestBoundary =\r\n        gzdWestBoundary < mapBounds.getWest() && this.mgrsGridInterval !== 100000\r\n          ? mapBounds.getWest()\r\n          : gzdWestBoundary;\r\n      let effectiveEastBoundary =\r\n        gzdEastBoundary > mapBounds.getEast() && this.mgrsGridInterval !== 100000\r\n          ? mapBounds.getEast()\r\n          : gzdEastBoundary;\r\n      let effectiveNorthBoundary = gzdNorthBoundary > mapBounds.getNorth() ? mapBounds.getNorth() : gzdNorthBoundary;\r\n      let effectiveSouthBoundary = gzdSouthBoundary < mapBounds.getSouth() ? mapBounds.getSouth() : gzdSouthBoundary;\r\n\r\n      const effectiveBounds = L.latLngBounds(\r\n        L.latLng(effectiveNorthBoundary, effectiveWestBoundary),\r\n        L.latLng(effectiveSouthBoundary, effectiveEastBoundary)\r\n      );\r\n\r\n      // Buffer is used to ensure that if we're right on the GZD boundary that we don't get the adjacent GZD\r\n      const buffer = 0.00001;\r\n      const swCornerUtm = llToUtm(effectiveSouthBoundary + buffer, effectiveWestBoundary + buffer);\r\n      const seCornerUtm = llToUtm(effectiveSouthBoundary + buffer, effectiveEastBoundary - buffer);\r\n      const nwCornerUtm = llToUtm(effectiveNorthBoundary - buffer, effectiveWestBoundary + buffer);\r\n      const neCornerUtm = llToUtm(effectiveNorthBoundary - buffer, effectiveEastBoundary - buffer);\r\n\r\n      let startingEasting = this.map.getCenter().lat >= 0 ? swCornerUtm.easting : nwCornerUtm.easting;\r\n      let finalEasting = this.map.getCenter().lat >= 0 ? seCornerUtm.easting : neCornerUtm.easting;\r\n\r\n      let startingNorthing = swCornerUtm.northing;\r\n      let finalNorthing = neCornerUtm.northing;\r\n\r\n      startingEasting = Math.floor(startingEasting / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n      finalEasting = Math.ceil(finalEasting / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n      startingNorthing = Math.floor(startingNorthing / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n      finalNorthing = Math.ceil(finalNorthing / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n\r\n      let eastingArray = [];\r\n      for (let i = startingEasting; i <= finalEasting; i += this.mgrsGridInterval) {\r\n        eastingArray.push(i);\r\n      }\r\n\r\n      let northingArray = [];\r\n      for (let i = startingNorthing; i <= finalNorthing; i += this.mgrsGridInterval) {\r\n        northingArray.push(i);\r\n      }\r\n\r\n      let zoneLetter = nwCornerUtm.zoneLetter;\r\n      let zoneNumber = nwCornerUtm.zoneNumber;\r\n\r\n      // Lines of constant Eastings\r\n\r\n      eastingArray.forEach((eastingElem, eastingIndex, eastArr) => {\r\n        northingArray.forEach((northingElem, northingIndex, northArr) => {\r\n          let gridIntersectionLl = utmToLl(eastingElem, northingElem, zoneNumber, zoneLetter);\r\n\r\n          // The grid array is larger than the GZD.  As such the first and last elements of the easting/northing\r\n          // arrays will be outside of the GZD.  These points are required because they are used to derive the\r\n          // point of intersection with the GZD boundary.\r\n          if (gridIntersectionLl.lng > gzdEastBoundary) {\r\n            return;\r\n          } else if (gridIntersectionLl.lng < gzdWestBoundary) {\r\n            return;\r\n          }\r\n          // This block will truncate the line at the southern boundary of the GZD\r\n          if (gridIntersectionLl.lat <= gzdSouthBoundary) {\r\n            let nextIntersectionLl = utmToLl(eastingElem, northArr[northingIndex + 1], zoneNumber, zoneLetter);\r\n            gridIntersectionLl = connectToGzdBoundary(gridIntersectionLl, nextIntersectionLl, 'North');\r\n            // This block will truncate the line at the northern boundary of the GZD\r\n          } else if (gridIntersectionLl.lat > gzdNorthBoundary) {\r\n            let previousIntersectionLl = utmToLl(eastingElem, northArr[northingIndex - 1], zoneNumber, zoneLetter);\r\n\r\n            gridIntersectionLl = connectToGzdBoundary(gridIntersectionLl, previousIntersectionLl, 'South');\r\n          }\r\n          let gridIntersectionXy;\r\n          if (gridIntersectionLl.lat && gridIntersectionLl.lng) {\r\n            gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n          } else {\r\n            return;\r\n          }\r\n\r\n          if (northingIndex === 0) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n          } else {\r\n            ctx.lineTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n          }\r\n        });\r\n        const notHkLine = eastingElem % 100000 !== 0;\r\n        this._drawLine(ctx, notHkLine);\r\n        // HACK - Begin path doesn't appear to get called in edge cases in the following loop\r\n        ctx.beginPath();\r\n      });\r\n\r\n      // Lines of constant Northings\r\n      northingArray.forEach((northingElem, northingIndex, northArr) => {\r\n        let beginPathCalled = false;\r\n        eastingArray.forEach((eastingElem, eastingIndex, eastArr) => {\r\n          let gridIntersectionLl = utmToLl(eastingElem, northingElem, zoneNumber, zoneLetter);\r\n\r\n          // The grid array is larger than the GZD.  As such the first and last elements of the easting/northing\r\n          // arrays will be outside of the GZD.  These points are required because they are used to derive the\r\n          // point of intersection with the GZD boundary.\r\n          if (gridIntersectionLl.lat > gzdNorthBoundary || gridIntersectionLl.lat < gzdSouthBoundary) {\r\n            if (!beginPathCalled) {\r\n              ctx.beginPath();\r\n              beginPathCalled = true;\r\n            }\r\n\r\n            return;\r\n          }\r\n          let gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n          if (eastingIndex === 0) {\r\n            ctx.beginPath();\r\n            beginPathCalled = true;\r\n            // Truncate the line to the effective western boundary\r\n            if (gridIntersectionLl.lng < effectiveWestBoundary) {\r\n              const nextGridIntersectionLl = utmToLl(eastArr[eastingIndex + 1], northingElem, zoneNumber, zoneLetter);\r\n              const slope = getLineSlope(gridIntersectionLl, nextGridIntersectionLl);\r\n\r\n              try {\r\n                gridIntersectionLl.lat = getAdjustedLatitude(slope, effectiveWestBoundary, gridIntersectionLl);\r\n\r\n                gridIntersectionLl.lng = effectiveWestBoundary;\r\n\r\n                gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n              } catch (e) {\r\n                console.error(e);\r\n                console.trace();\r\n              }\r\n            }\r\n\r\n            ctx.moveTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n          } else {\r\n            // Truncate the line to the effective eastern boundary\r\n            if (gridIntersectionLl.lng > effectiveEastBoundary) {\r\n              const previousGridIntersectionLl = utmToLl(\r\n                eastArr[eastingIndex - 1],\r\n                northingElem,\r\n                zoneNumber,\r\n                zoneLetter\r\n              );\r\n              const slope = getLineSlope(gridIntersectionLl, previousGridIntersectionLl);\r\n\r\n              try {\r\n                gridIntersectionLl.lat = getAdjustedLatitude(slope, effectiveEastBoundary, gridIntersectionLl);\r\n\r\n                gridIntersectionLl.lng = effectiveEastBoundary;\r\n\r\n                gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n              } catch (e) {\r\n                console.error(e);\r\n                console.trace();\r\n              }\r\n            }\r\n            ctx.lineTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n          }\r\n        });\r\n\r\n        const notHkLine = northingElem % 100000 !== 0;\r\n        this._drawLine(ctx, notHkLine);\r\n      });\r\n\r\n      let skipRemainder = false;\r\n      // Draw the labels\r\n      if (this.mgrsGridInterval === 100000) {\r\n        eastingArray.forEach((eastingElem, eastingIndex, ea) => {\r\n          if (skipRemainder) {\r\n            return;\r\n          }\r\n          northingArray.forEach((northingElem, northingIndex, na) => {\r\n            let labelLl;\r\n            let currentLl = utmToLl(eastingElem, northingElem, zoneNumber, zoneLetter);\r\n            let adjacentLlNorthing;\r\n            let adjacentLlEasting;\r\n            if (northingIndex === na.length - 1) {\r\n              return;\r\n            }\r\n\r\n            if (eastingIndex !== ea.length - 1) {\r\n              adjacentLlEasting = utmToLl(ea[eastingIndex + 1], northingElem, zoneNumber, zoneLetter);\r\n              if (adjacentLlEasting.lng > effectiveEastBoundary) {\r\n                const slope = getLineSlope(currentLl, adjacentLlEasting);\r\n                adjacentLlEasting.lat = getAdjustedLatitude(slope, effectiveEastBoundary, adjacentLlEasting);\r\n                adjacentLlEasting.lng = effectiveEastBoundary;\r\n                skipRemainder = true;\r\n              }\r\n            } else {\r\n              adjacentLlEasting = utmToLl(ea[eastingIndex - 1], northingElem, zoneNumber, zoneLetter);\r\n            }\r\n\r\n            adjacentLlNorthing = utmToLl(eastingElem, na[northingIndex + 1], zoneNumber, zoneLetter);\r\n\r\n            if (currentLl.lng < effectiveWestBoundary) {\r\n              const slope = getLineSlope(currentLl, adjacentLlEasting);\r\n              currentLl.lat = getAdjustedLatitude(slope, effectiveWestBoundary, currentLl);\r\n              currentLl.lng = effectiveWestBoundary;\r\n            } else if (currentLl.lng > effectiveEastBoundary) {\r\n              const slope = getLineSlope(currentLl, adjacentLlEasting);\r\n              currentLl.lat = getAdjustedLatitude(slope, effectiveEastBoundary, currentLl);\r\n              currentLl.lng = effectiveEastBoundary;\r\n            }\r\n\r\n            if (L.latLng(currentLl).distanceTo(adjacentLlEasting) < 10000) {\r\n              return;\r\n            }\r\n\r\n            labelLl = {\r\n              lat: (currentLl.lat + adjacentLlNorthing.lat) / 2,\r\n              lng: (currentLl.lng + adjacentLlEasting.lng) / 2,\r\n            };\r\n\r\n            try {\r\n              if (labelLl && effectiveBounds.contains(labelLl)) {\r\n                let labelText = llToMgrs([labelLl.lng, labelLl.lat]).match(MGRS_REGEX)[HK_INDEX];\r\n\r\n                drawLabel(\r\n                  ctx,\r\n                  labelText,\r\n                  this.options.gridFontColor,\r\n                  this.options.hkColor,\r\n                  this.map.latLngToContainerPoint(labelLl)\r\n                );\r\n              }\r\n            } catch (e) {\r\n              return;\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        eastingArray.forEach((eastingElem, eastingIndex, ea) => {\r\n          if (!(eastingIndex === 0 || eastingIndex === ea.length - 1)) {\r\n            let labelXy;\r\n            try {\r\n              let labelLl = utmToLl(eastingElem, northingArray[1], zoneNumber, zoneLetter);\r\n\r\n              labelXy = this.map.latLngToContainerPoint({ lat: effectiveSouthBoundary, lng: labelLl.lng });\r\n            } catch (e) {\r\n              return;\r\n            }\r\n\r\n            let labelText = this._getLabelText(eastingElem);\r\n\r\n            drawLabel(ctx, labelText, this.options.gridFontColor, this.options.gridColor, {\r\n              x: labelXy.x,\r\n              y: labelXy.y - 15,\r\n            });\r\n          }\r\n        });\r\n\r\n        northingArray.forEach((northingElem, northingIndex, na) => {\r\n          let labelXy;\r\n          try {\r\n            let labelLl = utmToLl(eastingArray[eastingArray.length - 1], northingElem, zoneNumber, zoneLetter);\r\n\r\n            labelXy = this.map.latLngToContainerPoint({ lat: labelLl.lat, lng: effectiveEastBoundary });\r\n          } catch (e) {\r\n            return;\r\n          }\r\n\r\n          let labelText = this._getLabelText(northingElem);\r\n\r\n          drawLabel(ctx, labelText, this.options.gridFontColor, this.options.gridColor, {\r\n            x: labelXy.x - 15,\r\n            y: labelXy.y,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport { MgrsGraticule };\r\n","import React from 'react';\r\nimport { LayersControl, MapContainer, TileLayer } from 'react-leaflet';\r\nimport { MgrsGraticule } from 'react-leaflet-mgrs-graticule';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <MapContainer\r\n      center={[45.4, -75.7]}\r\n      zoom={7}\r\n      minZoom={3}\r\n      maxZoom={16}\r\n      maxNativeZoom={15}\r\n      maxBounds={[\r\n        [-90, -180],\r\n        [90, 180],\r\n      ]}\r\n    >\r\n      <LayersControl position=\"topright\">\r\n        <LayersControl.BaseLayer checked name=\"ESRI Satellite\">\r\n          <TileLayer\r\n            url=\"https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\r\n            attribution='&copy; <a href=\"https://wiki.openstreetmap.org/wiki/Esri\"></a> contributors'\r\n          />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.BaseLayer name=\"ESRI Clarity\">\r\n          <TileLayer\r\n            url=\"https://clarity.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\r\n            attribution='&copy; <a href=\"https://wiki.openstreetmap.org/wiki/Esri\"></a> contributors'\r\n          />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.BaseLayer name=\"OSM Topo\">\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n        </LayersControl.BaseLayer>\r\n\r\n        <MgrsGraticule />\r\n      </LayersControl>\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}