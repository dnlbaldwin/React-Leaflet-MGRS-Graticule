{"version":3,"sources":["../../src/Coordinates.js","../../src/CommonUtils.js","../../src/MgrsGraticule.js","App.js","index.js"],"names":["utm","require","utmToLl","easting","northing","zoneNumber","zoneLetter","convertUtmToLatLng","llToUtm","lat","lng","_LLtoUTM","lon","llToMgrs","point","resolution","forward","ll","eccPrimeSquared","N","T","C","A","LongOriginRad","ZoneNumber","Lat","Long","a","eccSquared","k0","LatRad","degToRad","LongRad","Math","floor","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","round","getLetterDesignator","deg","PI","LetterDesignator","TEN_K_MGRS_REGEX","getLineSlope","pointOne","pointTwo","NaN","getAdjustedLatitude","slope","adjustedLongitude","unadjustedLatLong","isNaN","getAdjustedLongitude","adjustedLatitude","Error","getNextMgrsGzdCharacter","char","result","String","fromCharCode","charCodeAt","connectToGzdBoundary","direction","grid","gzdEastLongitude","getGZD","match","geometry","coordinates","gzdWestLongitude","gzdNorthLatitude","gzdSouthLatitude","drawLabel","ctx","labelText","textColor","backgroundColor","labelPosition","textWidth","measureText","width","textHeight","fontBoundingBoxAscent","labelX","x","labelY","y","fillStyle","fillRect","fillText","MGRS_REGEX","MgrsGraticule","props","map","useMap","Graticule","name","checked","this","currLatInterval","currLngInterval","defaultOptions","showGrid","showLabel","color","font","fontColor","dashArray","weight","gridColor","hkColor","hkDashArray","gridFont","gridFontColor","gridDashArray","hundredKMinZoom","tenKMinZoom","oneKMinZoom","options","canvas","document","createElement","classList","add","on","reset","showGraticule","clearRect","replace","getPanes","overlayPane","contains","appendChild","e","getContext","height","mapSize","getSize","mapLeftTop","containerPointToLayerPoint","style","getZoom","mgrsGridInterval","drawGrid","drawGzd","minZoom","lineWidth","strokeStyle","setLineDash","leftTop","containerPointToLatLng","rightBottom","pointPerLat","pointPerLon","parseInt","i","drawLatitudeLine","drawLongitudeLine","tick","lngLeft","lngRight","leftEnd","latLngToContainerPoint","rightEnd","beginPath","moveTo","lineTo","stroke","latTop","latBottom","canvasTop","canvasBottom","TOP_OF_W_SERIES_GZD","TOP_OF_V_SERIES_GZD","BOTTOM_OF_V_SERIES_GZD","RIGHT_TOP_OF_GZD","LEFT_TOP_OF_GZD","LEFT_BOTTOM_OF_GZD","RIGHT_BOTTOM_OF_GZD","TOP_LEFT_OF_32_SERIES_GZD","TOP_LEFT_OF_33X_GZD","BOTTOM_LEFT_OF_33X_GZD","TOP_RIGHT_OF_32W_GZD","TOP_LEFT_OF_34_SERIES_GZD","TOP_LEFT_OF_35X_GZD","BOTTOM_LEFT_OF_35X_GZD","TOP_RIGHT_OF_34W_GZD","TOP_LEFT_OF_35_SERIES_GZD","TOP_LEFT_OF_37X_GZD","BOTTOM_LEFT_OF_37X_GZD","TOP_RIGHT_OF_36W_GZD","drawGzdLabels","longitude","labelLatitude","labelLongitude","gzdLabel","error","labelXy","element","label","toString","notHkLine","visibleGzds","nwBoundMgrs","getBounds","getNorthWest","neBoundMgrs","getNorthEast","seBoundMgrs","getSouthEast","swBoundMgrs","getSouthWest","nwGzd","neGzd","seGzd","swGzd","GZD_REGEX","nwLongitudeBand","nwLatitudeBand","neLongitudeBand","swLatitudeBand","longitudeBands","push","initialLongitudeBand","currentLatitudeBand","len","length","flat","longitudeBand","filter","includes","getAllVisibleGzds","getVizGzds","mapBounds","forEach","gzd","gzdIndex","visibleGridArr","gzdObject","gzdWestBoundary","gzdEastBoundary","gzdNorthBoundary","gzdSouthBoundary","effectiveWestBoundary","getWest","effectiveEastBoundary","getEast","effectiveNorthBoundary","getNorth","effectiveSouthBoundary","getSouth","buffer","swCornerUtm","seCornerUtm","nwCornerUtm","neCornerUtm","startingEasting","getCenter","finalEasting","startingNorthing","finalNorthing","ceil","eastingArray","northingArray","eastingElem","eastingIndex","eastArr","initialPlacementCompleted","northingElem","northingIndex","northArr","gridIntersectionLl","gridIntersectionXy","Number","isFinite","_drawLine","beginPathCalled","console","trace","nextGridIntersectionLl","ea","na","labelLl","adjacentLlNorthing","adjacentLlEasting","currentLl","effectiveBounds","L","latLngBounds","latLng","distanceTo","_getLabelText","mgrsGraticuleName","App","MapContainer","center","zoom","maxZoom","maxNativeZoom","maxBounds","LayersControl","position","BaseLayer","TileLayer","url","attribution","Overlay","LayerGroup","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1574085b.chunk.js","sourcesContent":["import { forward } from 'mgrs';\r\n\r\nvar utmObj = require('utm-latlng');\r\nvar utm = new utmObj(); // Defaults to WGS-84\r\n\r\nfunction utmToLl(easting, northing, zoneNumber, zoneLetter) {\r\n  return utm.convertUtmToLatLng(easting, northing, zoneNumber, zoneLetter);\r\n}\r\n\r\nfunction llToUtm(lat, lng, resolution = 0) {\r\n  // return utm.convertLatLngToUtm(lat, lng, resolution);\r\n  return _LLtoUTM({ lat: lat, lon: lng });\r\n}\r\n\r\n/**\r\n *\r\n * @param {arr} point [Lng,Lat]\r\n * @param {number} resolution\r\n */\r\nfunction llToMgrs(point, resolution = 1) {\r\n  return forward(point, resolution);\r\n}\r\n\r\nfunction _LLtoUTM(ll) {\r\n  var Lat = ll.lat;\r\n  var Long = ll.lon || ll.lng;\r\n  var a = 6378137.0; //ellip.radius;\r\n  var eccSquared = 0.00669438; //ellip.eccsq;\r\n  var k0 = 0.9996;\r\n  var LongOrigin;\r\n  var eccPrimeSquared;\r\n  var N, T, C, A, M;\r\n  var LatRad = degToRad(Lat);\r\n  var LongRad = degToRad(Long);\r\n  var LongOriginRad;\r\n  var ZoneNumber;\r\n  // (int)\r\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\r\n\r\n  //Make sure the longitude 180.00 is in Zone 60\r\n  if (Long === 180) {\r\n    ZoneNumber = 60;\r\n  }\r\n\r\n  // Special zone for Norway\r\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\r\n    ZoneNumber = 32;\r\n  }\r\n\r\n  // Special zones for Svalbard\r\n  if (Lat >= 72.0 && Lat < 84.0) {\r\n    if (Long >= 0.0 && Long < 9.0) {\r\n      ZoneNumber = 31;\r\n    } else if (Long >= 9.0 && Long < 21.0) {\r\n      ZoneNumber = 33;\r\n    } else if (Long >= 21.0 && Long < 33.0) {\r\n      ZoneNumber = 35;\r\n    } else if (Long >= 33.0 && Long < 42.0) {\r\n      ZoneNumber = 37;\r\n    }\r\n  }\r\n\r\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\r\n  // in middle of\r\n  // zone\r\n  LongOriginRad = degToRad(LongOrigin);\r\n\r\n  eccPrimeSquared = eccSquared / (1 - eccSquared);\r\n\r\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\r\n  T = Math.tan(LatRad) * Math.tan(LatRad);\r\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\r\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\r\n\r\n  M =\r\n    a *\r\n    ((1 - eccSquared / 4 - (3 * eccSquared * eccSquared) / 64 - (5 * eccSquared * eccSquared * eccSquared) / 256) *\r\n      LatRad -\r\n      ((3 * eccSquared) / 8 + (3 * eccSquared * eccSquared) / 32 + (45 * eccSquared * eccSquared * eccSquared) / 1024) *\r\n        Math.sin(2 * LatRad) +\r\n      ((15 * eccSquared * eccSquared) / 256 + (45 * eccSquared * eccSquared * eccSquared) / 1024) *\r\n        Math.sin(4 * LatRad) -\r\n      ((35 * eccSquared * eccSquared * eccSquared) / 3072) * Math.sin(6 * LatRad));\r\n\r\n  var UTMEasting =\r\n    k0 *\r\n      N *\r\n      (A +\r\n        ((1 - T + C) * A * A * A) / 6.0 +\r\n        ((5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A) / 120.0) +\r\n    500000.0;\r\n\r\n  var UTMNorthing =\r\n    k0 *\r\n    (M +\r\n      N *\r\n        Math.tan(LatRad) *\r\n        ((A * A) / 2 +\r\n          ((5 - T + 9 * C + 4 * C * C) * A * A * A * A) / 24.0 +\r\n          ((61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A) / 720.0));\r\n  if (Lat < 0.0) {\r\n    UTMNorthing += 10000000.0; //10000000 meter offset for\r\n    // southern hemisphere\r\n  }\r\n\r\n  return {\r\n    northing: Math.round(UTMNorthing),\r\n    easting: Math.round(UTMEasting),\r\n    zoneNumber: ZoneNumber,\r\n    zoneLetter: getLetterDesignator(Lat),\r\n  };\r\n}\r\n\r\n/**\r\n * Conversion from degrees to radians.\r\n *\r\n * @private\r\n * @param {number} deg the angle in degrees.\r\n * @return {number} the angle in radians.\r\n */\r\nfunction degToRad(deg) {\r\n  return deg * (Math.PI / 180.0);\r\n}\r\n\r\n/**\r\n * Calculates the MGRS letter designator for the given latitude.\r\n *\r\n * @private\r\n * @param {number} lat The latitude in WGS84 to get the letter designator\r\n *     for.\r\n * @return {char} The letter designator.\r\n */\r\nfunction getLetterDesignator(lat) {\r\n  //This is here as an error flag to show that the Latitude is\r\n  //outside MGRS limits\r\n  var LetterDesignator = 'Z';\r\n\r\n  if (84 >= lat && lat >= 72) {\r\n    LetterDesignator = 'X';\r\n  } else if (72 > lat && lat >= 64) {\r\n    LetterDesignator = 'W';\r\n  } else if (64 > lat && lat >= 56) {\r\n    LetterDesignator = 'V';\r\n  } else if (56 > lat && lat >= 48) {\r\n    LetterDesignator = 'U';\r\n  } else if (48 > lat && lat >= 40) {\r\n    LetterDesignator = 'T';\r\n  } else if (40 > lat && lat >= 32) {\r\n    LetterDesignator = 'S';\r\n  } else if (32 > lat && lat >= 24) {\r\n    LetterDesignator = 'R';\r\n  } else if (24 > lat && lat >= 16) {\r\n    LetterDesignator = 'Q';\r\n  } else if (16 > lat && lat >= 8) {\r\n    LetterDesignator = 'P';\r\n  } else if (8 > lat && lat >= 0) {\r\n    LetterDesignator = 'N';\r\n  } else if (0 > lat && lat >= -8) {\r\n    LetterDesignator = 'M';\r\n  } else if (-8 > lat && lat >= -16) {\r\n    LetterDesignator = 'L';\r\n  } else if (-16 > lat && lat >= -24) {\r\n    LetterDesignator = 'K';\r\n  } else if (-24 > lat && lat >= -32) {\r\n    LetterDesignator = 'J';\r\n  } else if (-32 > lat && lat >= -40) {\r\n    LetterDesignator = 'H';\r\n  } else if (-40 > lat && lat >= -48) {\r\n    LetterDesignator = 'G';\r\n  } else if (-48 > lat && lat >= -56) {\r\n    LetterDesignator = 'F';\r\n  } else if (-56 > lat && lat >= -64) {\r\n    LetterDesignator = 'E';\r\n  } else if (-64 > lat && lat >= -72) {\r\n    LetterDesignator = 'D';\r\n  } else if (-72 > lat && lat >= -80) {\r\n    LetterDesignator = 'C';\r\n  }\r\n  return LetterDesignator;\r\n}\r\n\r\nexport { utmToLl, llToUtm, llToMgrs };\r\n","import { getGZD } from 'gzd-utils';\r\nimport { forward } from 'mgrs';\r\n\r\n// The following indicies are used to indentify coordinates returned from gzd-utils\r\nconst SW_INDEX = 0;\r\nconst NW_INDEX = 1;\r\nconst NE_INDEX = 2;\r\n\r\nconst LONGITUDE_INDEX = 0;\r\nconst LATITUDE_INDEX = 1;\r\n\r\nconst TEN_K_MGRS_REGEX = /([0-9]+[A-Z])([A-Z]{2})([0-9]{2})/;\r\nconst GZD_INDEX = 1;\r\n/**\r\n *\r\n * @param {*} pointOne\r\n * @param {*} pointTwo\r\n */\r\nfunction getLineSlope(pointOne, pointTwo) {\r\n  if (pointOne === pointTwo) {\r\n    return 0;\r\n  } else if (pointOne.lng === pointTwo.lng) {\r\n    return NaN;\r\n  } else {\r\n    return (pointTwo.lat - pointOne.lat) / (pointTwo.lng - pointOne.lng);\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} slope\r\n * @param {*} adjustedLongitude\r\n * @param {*} unadjustedLatLong\r\n */\r\nfunction getAdjustedLatitude(slope, adjustedLongitude, unadjustedLatLong) {\r\n  let result;\r\n  if (!isNaN(slope)) {\r\n    result = unadjustedLatLong.lat + slope * (adjustedLongitude - unadjustedLatLong.lng);\r\n  } else {\r\n    result = unadjustedLatLong.lat;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} slope\r\n * @param {*} adjustedLongitude\r\n * @param {*} unadjustedLatLong\r\n */\r\nfunction getAdjustedLongitude(slope, adjustedLatitude, unadjustedLatLong) {\r\n  let result;\r\n  if (slope === 0) {\r\n    const e = new Error('getAdjustedLongitude: Zero slope received');\r\n    throw e;\r\n  } else if (!isNaN(slope)) {\r\n    result = (adjustedLatitude - unadjustedLatLong.lat + slope * unadjustedLatLong.lng) / slope;\r\n  } else {\r\n    result = unadjustedLatLong.lng;\r\n  }\r\n\r\n  return result;\r\n}\r\n/**\r\n *\r\n * @param {string} char\r\n */\r\nfunction getNextMgrsGzdCharacter(char) {\r\n  // I and O are not valid characters for MGRS, so get the next\r\n  // character recursively\r\n  const result = String.fromCharCode(char.charCodeAt(0) + 1);\r\n  if (result === 'I' || result === 'O') {\r\n    return getNextMgrsGzdCharacter(result);\r\n  } else {\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * Given two points and a direction, will return a new point along the\r\n * line generated by pointOne and pointTwo which rests on the GZD boundary\r\n * @param {Dict} pointOne\r\n * @param {Dict} pointTwo\r\n * @param {String} direction\r\n */\r\nfunction connectToGzdBoundary(pointOne, pointTwo, direction) {\r\n  const slope = getLineSlope(pointOne, pointTwo);\r\n  // 10k mgrs resolution grid - e.g. 18TVR90\r\n  const grid = forward([pointOne.lng, pointOne.lat], 1);\r\n  let adjustedLongitude;\r\n  let adjustedLatitude;\r\n\r\n  switch (direction) {\r\n    case 'East':\r\n      const gzdEastLongitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][NE_INDEX][\r\n        LONGITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLatitude = getAdjustedLatitude(slope, gzdEastLongitude, pointTwo);\r\n      adjustedLongitude = gzdEastLongitude;\r\n\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n\r\n    case 'West':\r\n      const gzdWestLongitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][NW_INDEX][\r\n        LONGITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLatitude = getAdjustedLatitude(slope, gzdWestLongitude, pointTwo);\r\n\r\n      adjustedLongitude = gzdWestLongitude;\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n    case 'North':\r\n      const gzdNorthLatitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][NW_INDEX][\r\n        LATITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLongitude = getAdjustedLongitude(slope, gzdNorthLatitude, pointTwo);\r\n\r\n      // Handle a special case where the west most 100k easting line in the 32V GZD extends\r\n      // west of the boundary\r\n      const WEST_LNG_32V_BOUNDARY = 3;\r\n      if (\r\n        grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX] === '31V' &&\r\n        adjustedLongitude < WEST_LNG_32V_BOUNDARY &&\r\n        pointTwo.lng > WEST_LNG_32V_BOUNDARY\r\n      ) {\r\n        adjustedLatitude = getAdjustedLatitude(slope, WEST_LNG_32V_BOUNDARY, pointTwo);\r\n        adjustedLongitude = WEST_LNG_32V_BOUNDARY;\r\n      } else {\r\n        adjustedLatitude = gzdNorthLatitude;\r\n      }\r\n\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n\r\n    case 'South':\r\n      const gzdSouthLatitude = getGZD(grid.match(TEN_K_MGRS_REGEX)[GZD_INDEX]).geometry.coordinates[0][SW_INDEX][\r\n        LATITUDE_INDEX\r\n      ];\r\n\r\n      adjustedLongitude = getAdjustedLongitude(slope, gzdSouthLatitude, pointTwo);\r\n\r\n      adjustedLatitude = gzdSouthLatitude;\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n\r\n    default:\r\n      // TODO - lat/lng are undefined if we use this return statement\r\n      return { lat: adjustedLatitude, lng: adjustedLongitude };\r\n  }\r\n}\r\n\r\n// TODO - REFACTOR HACK\r\nfunction getAllVisibleGzds(nwGzd, neGzd, seGzd, swGzd) {\r\n  const GZD_REGEX = /([0-9]+)([A-Z])/;\r\n  const LONGITUDE_BAND_INDEX = 1;\r\n  const LATITUDE_BAND_INDEX = 2;\r\n\r\n  // Short circuit\r\n  if (nwGzd === seGzd) {\r\n    return [nwGzd];\r\n  }\r\n  const nwLongitudeBand = parseInt(nwGzd.match(GZD_REGEX)[LONGITUDE_BAND_INDEX]);\r\n  const nwLatitudeBand = nwGzd.match(GZD_REGEX)[LATITUDE_BAND_INDEX];\r\n\r\n  const neLongitudeBand = parseInt(neGzd.match(GZD_REGEX)[LONGITUDE_BAND_INDEX]);\r\n\r\n  const swLatitudeBand = swGzd.match(GZD_REGEX)[LATITUDE_BAND_INDEX];\r\n\r\n  let result = [];\r\n\r\n  const longitudeBands = []; // container for the formatted GZDs\r\n\r\n  // If the NW GZD is 32V then also include the relevant 31 series GZDs below it\r\n  // This ensures that grids are displayed (since 32V is larger at the expense of 31V)\r\n  if (nwGzd === '32V') {\r\n    longitudeBands.push('31');\r\n  }\r\n\r\n  // We span at least two vertical bands\r\n  if (nwLongitudeBand !== neLongitudeBand) {\r\n    for (let i = nwLongitudeBand; i <= neLongitudeBand; i++) {\r\n      longitudeBands.push(i.toString());\r\n    }\r\n    if (nwLatitudeBand !== swLatitudeBand) {\r\n      const initialLongitudeBand = [...longitudeBands];\r\n\r\n      let currentLatitudeBand = swLatitudeBand;\r\n      while (currentLatitudeBand <= nwLatitudeBand) {\r\n        const len = initialLongitudeBand.length;\r\n\r\n        for (let i = 0; i < len; i++) {\r\n          result.push(initialLongitudeBand[i] + currentLatitudeBand);\r\n        }\r\n\r\n        currentLatitudeBand = getNextMgrsGzdCharacter(currentLatitudeBand);\r\n      }\r\n\r\n      result = result.flat();\r\n    } else {\r\n      // Append the alpha character to the array of GZDs\r\n      const len = longitudeBands.length;\r\n      for (let i = 0; i < len; i++) {\r\n        longitudeBands[i] = longitudeBands[i].toString() + nwLatitudeBand;\r\n      }\r\n      result = longitudeBands;\r\n    }\r\n  } else {\r\n    // We span a single vertical band\r\n    let currentLatitudeBand = swLatitudeBand;\r\n    const longitudeBand = []; // Container for the formatted GZDs\r\n\r\n    while (currentLatitudeBand <= nwLatitudeBand) {\r\n      longitudeBand.push(nwLongitudeBand.toString() + currentLatitudeBand);\r\n\r\n      currentLatitudeBand = getNextMgrsGzdCharacter(currentLatitudeBand);\r\n    }\r\n    result = longitudeBand;\r\n  }\r\n  // Remove non-existant X series GZDs around Svalbard\r\n  result = result.filter(function (a) {\r\n    return a !== '32X' && a !== '34X' && a !== '36X';\r\n  });\r\n\r\n  // Add 32V if 31W is visible\r\n  // This ensures that grids are displayed (since 32V is larger at the expense of 31V)\r\n  if (result.includes('31W') && !result.includes('32V')) {\r\n    result.push('32V');\r\n  }\r\n\r\n  // Handles a special case where 32V can be the NW and NE GZD, but the algorithm\r\n  // doesn't show the 31U GZD\r\n  if (neGzd === '32V' && seGzd === '32U' && !result.includes('31U')) {\r\n    result.push('31U');\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction drawLabel(ctx, labelText, textColor, backgroundColor, labelPosition) {\r\n  const textWidth = ctx.measureText(labelText).width;\r\n  const textHeight = ctx.measureText(labelText).fontBoundingBoxAscent;\r\n\r\n  // Calculate label xy position\r\n  const labelX = labelPosition.x;\r\n  const labelY = labelPosition.y;\r\n\r\n  ctx.fillStyle = backgroundColor;\r\n  // Magic numbers will centre the rectangle over the text\r\n  ctx.fillRect(labelX - textWidth / 2 - 1, labelY - textHeight + 1, textWidth + 3, textHeight + 2);\r\n  ctx.fillStyle = textColor;\r\n  ctx.fillText(labelText, labelX - textWidth / 2, labelY);\r\n}\r\n\r\nexport {\r\n  connectToGzdBoundary,\r\n  drawLabel,\r\n  getAdjustedLatitude,\r\n  getAdjustedLongitude,\r\n  getAllVisibleGzds,\r\n  getLineSlope,\r\n  getNextMgrsGzdCharacter,\r\n};\r\n","import { utmToLl, llToUtm, llToMgrs } from './Coordinates';\r\nimport { Layer } from 'leaflet';\r\nimport { useMap } from 'react-leaflet';\r\n\r\nimport {\r\n  connectToGzdBoundary,\r\n  drawLabel,\r\n  getAdjustedLatitude,\r\n  getAdjustedLongitude,\r\n  getAllVisibleGzds,\r\n  getLineSlope,\r\n} from './CommonUtils';\r\nimport { getGZD } from 'gzd-utils';\r\n\r\n// The following indicies are used to indentify coordinates returned from gzd-utils\r\nconst SW_INDEX = 0;\r\nconst NW_INDEX = 1;\r\nconst NE_INDEX = 2;\r\n\r\nconst LATITUDE_INDEX = 1;\r\nconst LONGITUDE_INDEX = 0;\r\n\r\nconst MGRS_REGEX = /([0-9]+[A-Z])([A-Z]{2})(\\d+)/;\r\nconst GZD_INDEX = 1;\r\nconst HK_INDEX = 2;\r\nconst GRID_INDEX = 3;\r\n\r\nconst MgrsGraticule = (props) => {\r\n  let map = useMap();\r\n  let g = new Graticule(map, props.name, props.checked);\r\n\r\n  return null;\r\n};\r\n\r\nclass Graticule {\r\n  constructor(map, name, checked) {\r\n    this.currLatInterval = 8;\r\n    this.currLngInterval = 6;\r\n\r\n    this.defaultOptions = {\r\n      showGrid: true,\r\n      showLabel: true,\r\n      color: '#888888',\r\n      font: '14px Courier New',\r\n      fontColor: '#FFF',\r\n      dashArray: [6, 6],\r\n      weight: 1.5,\r\n      gridColor: '#000',\r\n      hkColor: '#990000', //Font background colour and dash colour\r\n      hkDashArray: [4, 4],\r\n      gridFont: '14px Courier New',\r\n      gridFontColor: '#FFF',\r\n      gridDashArray: [],\r\n      hundredKMinZoom: 6,\r\n      tenKMinZoom: 9,\r\n      oneKMinZoom: 12,\r\n    };\r\n\r\n    this.options = this.defaultOptions;\r\n    this.map = map;\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.classList.add('leaflet-zoom-animated');\r\n    this.canvas.classList.add(this.name);\r\n\r\n    this.map.on('viewreset', this.reset, this);\r\n    this.map.on('move', this.reset, this);\r\n    this.map.on('overlayadd', this.showGraticule, this);\r\n    this.map.on('overlayremove', this.clearRect, this);\r\n\r\n    // Strip any spaces as they can't be used in class names\r\n    this.name = name.replace(/\\s/g, '');\r\n\r\n    if (checked) {\r\n      this.options.showGrid = true;\r\n      this.reset();\r\n    } else {\r\n      this.options.showGrid = false;\r\n    }\r\n\r\n    // Add the canvas only if it hasn't already been added\r\n    if (!this.map.getPanes().overlayPane.classList.contains(this.name)) {\r\n      this.map.getPanes().overlayPane.appendChild(this.canvas);\r\n    }\r\n  }\r\n\r\n  clearRect(e) {\r\n    if (e.name === this.name) {\r\n      let ctx = this.canvas.getContext('2d');\r\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      this.options.showGrid = false;\r\n    }\r\n  }\r\n\r\n  showGraticule(e) {\r\n    if (e.name === this.name) {\r\n      this.options.showGrid = true;\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    if (!this.options.showGrid) {\r\n      return;\r\n    }\r\n    const mapSize = this.map.getSize();\r\n    const mapLeftTop = this.map.containerPointToLayerPoint([0, 0]);\r\n\r\n    this.canvas.style['transform'] = `translate3d(${mapLeftTop.x}px,${mapLeftTop.y}px,0)`;\r\n\r\n    this.canvas.width = mapSize.x;\r\n    this.canvas.height = mapSize.y;\r\n\r\n    if (this.map.getZoom() > this.options.oneKMinZoom) {\r\n      this.mgrsGridInterval = 1000; //1k resolution\r\n    } else if (this.map.getZoom() > this.options.tenKMinZoom) {\r\n      this.mgrsGridInterval = 10000; //10k resolution\r\n    } else if (this.map.getZoom() > this.options.hundredKMinZoom) {\r\n      this.mgrsGridInterval = 100000; //100k resolution\r\n    } else {\r\n      this.mgrsGridInterval = null;\r\n    }\r\n\r\n    let ctx = this.canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.drawGrid(ctx);\r\n    this.drawGzd(ctx);\r\n  }\r\n\r\n  drawGzd(ctx) {\r\n    if (!this.canvas || !this.map) {\r\n      return;\r\n    }\r\n\r\n    if (this.map.getZoom() < this.options.minZoom) {\r\n      return;\r\n    }\r\n\r\n    ctx.lineWidth = this.options.weight;\r\n    ctx.strokeStyle = this.options.color;\r\n    ctx.fillStyle = this.options.color;\r\n    ctx.setLineDash(this.options.dashArray);\r\n    if (this.options.font) {\r\n      ctx.font = this.options.font;\r\n    }\r\n\r\n    let leftTop = this.map.containerPointToLatLng({ x: 0, y: 0 });\r\n    let rightBottom = this.map.containerPointToLatLng({\r\n      x: this.canvas.width,\r\n      y: this.canvas.height,\r\n    });\r\n\r\n    let pointPerLat = (leftTop.lat - rightBottom.lat) / (this.canvas.height * 0.2);\r\n    let pointPerLon = (rightBottom.lng - leftTop.lng) / (this.canvas.width * 0.2);\r\n\r\n    if (isNaN(pointPerLat) || isNaN(pointPerLon)) {\r\n      return;\r\n    }\r\n\r\n    if (pointPerLat < 1) {\r\n      pointPerLat = 1;\r\n    }\r\n    if (pointPerLon < 1) {\r\n      pointPerLon = 1;\r\n    }\r\n\r\n    if (rightBottom.lat < -90) {\r\n      rightBottom.lat = -90;\r\n    } else {\r\n      rightBottom.lat = parseInt(rightBottom.lat - pointPerLat, 10);\r\n    }\r\n\r\n    if (leftTop.lat > 90) {\r\n      leftTop.lat = 90;\r\n    } else {\r\n      leftTop.lat = parseInt(leftTop.lat + pointPerLat, 10);\r\n    }\r\n\r\n    if (leftTop.lng > 0 && rightBottom.lng < 0) {\r\n      rightBottom.lng += 360;\r\n    }\r\n    rightBottom.lng = parseInt(rightBottom.lng + pointPerLon, 10);\r\n    leftTop.lng = parseInt(leftTop.lng - pointPerLon, 10);\r\n\r\n    // Northern hemisphere\r\n    for (let i = this.currLatInterval; i <= leftTop.lat; i += this.currLatInterval) {\r\n      if (i >= rightBottom.lat) {\r\n        // Handle 'X' MGRS Zone - Do not need it for the southern equivalent 'C'\r\n        if (i === 80) {\r\n          i = 84;\r\n        }\r\n        this.drawLatitudeLine(ctx, i, leftTop.lng, rightBottom.lng);\r\n      }\r\n    }\r\n\r\n    // Southern hemisphere\r\n    for (let i = 0; i >= rightBottom.lat; i -= this.currLatInterval) {\r\n      if (i <= leftTop.lat) {\r\n        this.drawLatitudeLine(ctx, i, leftTop.lng, rightBottom.lng);\r\n      }\r\n    }\r\n\r\n    // HACK - Add six to the right bottom lng to make sure the East 31V boundary is displayed at all times\r\n    for (let i = -180; i <= rightBottom.lng + 6; i += this.currLngInterval) {\r\n      this.drawLongitudeLine(ctx, i, leftTop.lat, rightBottom.lat);\r\n    }\r\n  }\r\n\r\n  drawLatitudeLine(ctx, tick, lngLeft, lngRight) {\r\n    const leftEnd = this.map.latLngToContainerPoint({\r\n      lat: tick,\r\n      lng: lngLeft,\r\n    });\r\n\r\n    const rightEnd = this.map.latLngToContainerPoint({\r\n      lat: tick,\r\n      lng: lngRight,\r\n    });\r\n\r\n    ctx.beginPath();\r\n    ctx.moveTo(leftEnd.x, leftEnd.y);\r\n    ctx.lineTo(rightEnd.x, rightEnd.y);\r\n    ctx.stroke();\r\n  }\r\n\r\n  drawLongitudeLine(ctx, tick, latTop, latBottom) {\r\n    if (latTop >= 84) {\r\n      latTop = 84; // Ensure GZD vertical lines do not extend into the arctic\r\n    }\r\n\r\n    if (latBottom <= -80) {\r\n      latBottom = -80; // Ensure GZD vertical lines do not extend into the antarctic\r\n    }\r\n\r\n    const canvasTop = this.map.latLngToContainerPoint({\r\n      lat: latTop,\r\n      lng: tick,\r\n    });\r\n\r\n    const canvasBottom = this.map.latLngToContainerPoint({\r\n      lat: latBottom,\r\n      lng: tick,\r\n    });\r\n\r\n    const TOP_OF_W_SERIES_GZD = 72;\r\n\r\n    ctx.beginPath();\r\n    // Handle Norway\r\n    if (tick === 6) {\r\n      const TOP_OF_V_SERIES_GZD = 64;\r\n      const BOTTOM_OF_V_SERIES_GZD = 56;\r\n      const RIGHT_OF_31_SERIES_GZD = 3;\r\n\r\n      const RIGHT_TOP_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: TOP_OF_V_SERIES_GZD,\r\n        lng: tick,\r\n      });\r\n\r\n      const LEFT_TOP_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: TOP_OF_V_SERIES_GZD,\r\n        lng: RIGHT_OF_31_SERIES_GZD,\r\n      });\r\n\r\n      const LEFT_BOTTOM_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: BOTTOM_OF_V_SERIES_GZD,\r\n        lng: RIGHT_OF_31_SERIES_GZD,\r\n      });\r\n\r\n      const RIGHT_BOTTOM_OF_GZD = this.map.latLngToContainerPoint({\r\n        lat: BOTTOM_OF_V_SERIES_GZD,\r\n        lng: tick,\r\n      });\r\n      if (latTop > TOP_OF_V_SERIES_GZD && latBottom > BOTTOM_OF_V_SERIES_GZD) {\r\n        // Top segment only\r\n        // Do not draw through Svalbard\r\n        if (latTop > TOP_OF_W_SERIES_GZD) {\r\n          const TOP_LEFT_OF_32_SERIES_GZD = this.map.latLngToContainerPoint({\r\n            lat: TOP_OF_W_SERIES_GZD,\r\n            lng: tick,\r\n          });\r\n          ctx.moveTo(TOP_LEFT_OF_32_SERIES_GZD.x, TOP_LEFT_OF_32_SERIES_GZD.y);\r\n        } else {\r\n          ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        }\r\n\r\n        ctx.lineTo(RIGHT_TOP_OF_GZD.x, RIGHT_TOP_OF_GZD.y);\r\n\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, LEFT_TOP_OF_GZD.y);\r\n\r\n        ctx.lineTo(LEFT_TOP_OF_GZD.x, canvasBottom.y);\r\n      } else if (\r\n        //Bottom segment only\r\n        latTop < TOP_OF_V_SERIES_GZD &&\r\n        latBottom < BOTTOM_OF_V_SERIES_GZD\r\n      ) {\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, canvasTop.y);\r\n\r\n        ctx.lineTo(LEFT_BOTTOM_OF_GZD.x, LEFT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.moveTo(RIGHT_BOTTOM_OF_GZD.x, RIGHT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.lineTo(RIGHT_BOTTOM_OF_GZD.x, canvasBottom.y);\r\n      } else if (\r\n        // Entire thing\r\n        latTop >= TOP_OF_V_SERIES_GZD &&\r\n        latBottom <= BOTTOM_OF_V_SERIES_GZD\r\n      ) {\r\n        // Do not draw through Svalbard\r\n        if (latTop > TOP_OF_W_SERIES_GZD) {\r\n          const TOP_LEFT_OF_32_SERIES_GZD = this.map.latLngToContainerPoint({\r\n            lat: TOP_OF_W_SERIES_GZD,\r\n            lng: tick,\r\n          });\r\n          ctx.moveTo(TOP_LEFT_OF_32_SERIES_GZD.x, TOP_LEFT_OF_32_SERIES_GZD.y);\r\n        } else {\r\n          ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        }\r\n\r\n        ctx.lineTo(RIGHT_TOP_OF_GZD.x, RIGHT_TOP_OF_GZD.y);\r\n\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, LEFT_TOP_OF_GZD.y);\r\n\r\n        ctx.lineTo(LEFT_BOTTOM_OF_GZD.x, LEFT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.moveTo(RIGHT_TOP_OF_GZD.x, LEFT_BOTTOM_OF_GZD.y);\r\n\r\n        ctx.lineTo(RIGHT_TOP_OF_GZD.x, canvasBottom.y);\r\n      } else if (\r\n        // Modified vertical only\r\n        latTop <= TOP_OF_V_SERIES_GZD &&\r\n        latBottom >= BOTTOM_OF_V_SERIES_GZD\r\n      ) {\r\n        ctx.moveTo(LEFT_TOP_OF_GZD.x, canvasTop.y);\r\n\r\n        ctx.lineTo(LEFT_BOTTOM_OF_GZD.x, canvasBottom.y);\r\n      }\r\n    } else if (tick === 12) {\r\n      if (latTop > TOP_OF_W_SERIES_GZD && latTop <= 84) {\r\n        // Handle Svalbard\r\n        const TOP_LEFT_OF_33X_GZD = this.map.latLngToContainerPoint({\r\n          lat: latTop,\r\n          lng: 9,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_33X_GZD.x, TOP_LEFT_OF_33X_GZD.y);\r\n\r\n        const BOTTOM_LEFT_OF_33X_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: 9,\r\n        });\r\n\r\n        ctx.lineTo(BOTTOM_LEFT_OF_33X_GZD.x, BOTTOM_LEFT_OF_33X_GZD.y);\r\n\r\n        const TOP_RIGHT_OF_32W_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n\r\n        ctx.moveTo(TOP_RIGHT_OF_32W_GZD.x, TOP_RIGHT_OF_32W_GZD.y);\r\n\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      } else {\r\n        // Normal use case\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      }\r\n    } else if (tick === 18) {\r\n      // Do not draw through Svalbard\r\n      if (latTop > TOP_OF_W_SERIES_GZD) {\r\n        const TOP_LEFT_OF_34_SERIES_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_34_SERIES_GZD.x, TOP_LEFT_OF_34_SERIES_GZD.y);\r\n      } else {\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n      }\r\n      ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n    } else if (tick === 24) {\r\n      if (latTop > TOP_OF_W_SERIES_GZD && latTop <= 84) {\r\n        // Handle Svalbard\r\n        const TOP_LEFT_OF_35X_GZD = this.map.latLngToContainerPoint({\r\n          lat: latTop,\r\n          lng: 21,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_35X_GZD.x, TOP_LEFT_OF_35X_GZD.y);\r\n\r\n        const BOTTOM_LEFT_OF_35X_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: 21,\r\n        });\r\n\r\n        ctx.lineTo(BOTTOM_LEFT_OF_35X_GZD.x, BOTTOM_LEFT_OF_35X_GZD.y);\r\n\r\n        const TOP_RIGHT_OF_34W_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n\r\n        ctx.moveTo(TOP_RIGHT_OF_34W_GZD.x, TOP_RIGHT_OF_34W_GZD.y);\r\n\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      } else {\r\n        // Normal use case\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      }\r\n    } else if (tick === 30) {\r\n      // Do not draw through Svalbard\r\n      if (latTop > TOP_OF_W_SERIES_GZD) {\r\n        const TOP_LEFT_OF_35_SERIES_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_35_SERIES_GZD.x, TOP_LEFT_OF_35_SERIES_GZD.y);\r\n      } else {\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n      }\r\n      ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n    } else if (tick === 36) {\r\n      if (latTop > TOP_OF_W_SERIES_GZD && latTop <= 84) {\r\n        // Handle Svalbard\r\n        const TOP_LEFT_OF_37X_GZD = this.map.latLngToContainerPoint({\r\n          lat: latTop,\r\n          lng: 33,\r\n        });\r\n        ctx.moveTo(TOP_LEFT_OF_37X_GZD.x, TOP_LEFT_OF_37X_GZD.y);\r\n\r\n        const BOTTOM_LEFT_OF_37X_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: 33,\r\n        });\r\n\r\n        ctx.lineTo(BOTTOM_LEFT_OF_37X_GZD.x, BOTTOM_LEFT_OF_37X_GZD.y);\r\n\r\n        const TOP_RIGHT_OF_36W_GZD = this.map.latLngToContainerPoint({\r\n          lat: TOP_OF_W_SERIES_GZD,\r\n          lng: tick,\r\n        });\r\n\r\n        ctx.moveTo(TOP_RIGHT_OF_36W_GZD.x, TOP_RIGHT_OF_36W_GZD.y);\r\n\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      } else {\r\n        // Normal use case\r\n        ctx.moveTo(canvasTop.x, canvasTop.y);\r\n        ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n      }\r\n    }\r\n    // The rest of the world...\r\n    else {\r\n      ctx.moveTo(canvasTop.x, canvasTop.y);\r\n      ctx.lineTo(canvasBottom.x, canvasBottom.y);\r\n    }\r\n    ctx.stroke();\r\n\r\n    this.drawGzdLabels(ctx, tick);\r\n  }\r\n\r\n  /** This function encapsulates drawing labels for GZDs\r\n   *\r\n   * @param {Obj} ctx - The HTML5 canvas' context\r\n   * @param {Int} longitude - The longitude (representing a boundary of a GZD) for which needs labels drawn for\r\n   */\r\n  drawGzdLabels(ctx, longitude) {\r\n    // -76 = middle latitude of the 'C' band - place the label in the middle\r\n    for (let labelLatitude = -76; labelLatitude < 84; labelLatitude += 8) {\r\n      let labelLongitude;\r\n      if (labelLatitude === 60) {\r\n        if (longitude === 0) {\r\n          //31V\r\n          labelLongitude = 1.5;\r\n        } else if (longitude === 6) {\r\n          //32V\r\n          labelLongitude = 7.5;\r\n        } else {\r\n          labelLongitude = longitude + 3;\r\n        }\r\n      } else if (labelLatitude === 76) {\r\n        if (longitude === 0) {\r\n          //31X\r\n          labelLongitude = 4.5;\r\n        } else if (longitude === 12) {\r\n          //33X\r\n          labelLongitude = 15;\r\n        } else if (longitude === 24) {\r\n          //35X\r\n          labelLongitude = 27;\r\n        } else if (longitude === 36) {\r\n          //37X\r\n          labelLongitude = 37.5;\r\n        } else {\r\n          labelLongitude = longitude + 3;\r\n        }\r\n      } else {\r\n        // Rest of the world...\r\n        labelLongitude = longitude + 3;\r\n      }\r\n\r\n      let gzdLabel;\r\n      try {\r\n        gzdLabel = llToMgrs([labelLongitude, labelLatitude], 1).match(MGRS_REGEX)[GZD_INDEX];\r\n      } catch (error) {\r\n        return; //Invalid MGRS value returned, so no need to try to display a label\r\n      }\r\n\r\n      // Don't want to display duplicates of the following zones\r\n      if (\r\n        !(gzdLabel === '33X' && longitude === 6) &&\r\n        !(gzdLabel === '35X' && longitude === 18) &&\r\n        !(gzdLabel === '37X' && longitude === 30)\r\n      ) {\r\n        const labelXy = this.map.latLngToContainerPoint({\r\n          lat: labelLatitude,\r\n          lng: labelLongitude,\r\n        });\r\n\r\n        drawLabel(ctx, gzdLabel, this.options.fontColor, this.options.color, labelXy);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {String} element - A UTM easting or northing element\r\n   */\r\n  _getLabelText(element) {\r\n    // Divide by 1000 so that the labels will always be correct (10k vs 1k resolution)\r\n    let label = ((element % 100000) / 1000).toString();\r\n\r\n    if (this.mgrsGridInterval === 10000 && label === '0') {\r\n      label = '00';\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  _drawLine(ctx, notHkLine) {\r\n    if (notHkLine) {\r\n      ctx.setLineDash(this.options.gridDashArray);\r\n      ctx.lineWidth = this.options.weight + 1;\r\n      ctx.strokeStyle = this.options.gridFontColor;\r\n      ctx.stroke();\r\n      ctx.lineWidth = this.options.weight;\r\n      ctx.strokeStyle = this.options.gridColor;\r\n      ctx.stroke();\r\n    } else {\r\n      ctx.lineWidth = this.options.weight;\r\n      ctx.strokeStyle = this.options.hkColor;\r\n      ctx.setLineDash(this.options.hkDashArray);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  getVizGzds() {\r\n    const nwBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getNorthWest()['lng'], this.map.getBounds().getNorthWest()['lat']],\r\n      1\r\n    );\r\n    const neBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getNorthEast()['lng'], this.map.getBounds().getNorthEast()['lat']],\r\n      1\r\n    );\r\n    const seBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getSouthEast()['lng'], this.map.getBounds().getSouthEast()['lat']],\r\n      1\r\n    );\r\n    const swBoundMgrs = llToMgrs(\r\n      [this.map.getBounds().getSouthWest()['lng'], this.map.getBounds().getSouthWest()['lat']],\r\n      1\r\n    );\r\n    let visibleGzds;\r\n    try {\r\n      visibleGzds = getAllVisibleGzds(\r\n        nwBoundMgrs.match(MGRS_REGEX)[GZD_INDEX],\r\n        neBoundMgrs.match(MGRS_REGEX)[GZD_INDEX],\r\n        seBoundMgrs.match(MGRS_REGEX)[GZD_INDEX],\r\n        swBoundMgrs.match(MGRS_REGEX)[GZD_INDEX]\r\n      );\r\n    } catch (e) {\r\n      visibleGzds = null;\r\n    }\r\n    return visibleGzds;\r\n  }\r\n\r\n  drawGrid(ctx) {\r\n    if (!this.canvas || !this.map) {\r\n      return;\r\n    }\r\n\r\n    if (this.map.getZoom() < this.options.hundredKMinZoom) {\r\n      return;\r\n    }\r\n\r\n    ctx.lineWidth = this.options.weight + 0.75;\r\n    ctx.strokeStyle = this.options.gridFontColor;\r\n    ctx.fillStyle = this.options.gridColor;\r\n    ctx.setLineDash(this.options.dashArray);\r\n    ctx.font = this.options.gridFont;\r\n    const visibleGzds = this.getVizGzds();\r\n\r\n    const mapBounds = this.map.getBounds();\r\n\r\n    // Just return if there's no visible grids.  Possible if the getVizGzds\r\n    // has an exception\r\n    if (!visibleGzds) {\r\n      return;\r\n    }\r\n    visibleGzds.forEach((gzd, gzdIndex, visibleGridArr) => {\r\n      let gzdObject;\r\n      try {\r\n        gzdObject = getGZD(gzd);\r\n      } catch (e) {\r\n        return;\r\n      }\r\n\r\n      const gzdWestBoundary = gzdObject['geometry']['coordinates'][0][NW_INDEX][LONGITUDE_INDEX];\r\n      const gzdEastBoundary = gzdObject['geometry']['coordinates'][0][NE_INDEX][LONGITUDE_INDEX];\r\n      const gzdNorthBoundary = gzdObject['geometry']['coordinates'][0][NW_INDEX][LATITUDE_INDEX];\r\n      const gzdSouthBoundary = gzdObject['geometry']['coordinates'][0][SW_INDEX][LATITUDE_INDEX];\r\n\r\n      // If drawing HK grids, just draw the entire GZD regardless\r\n      const effectiveWestBoundary =\r\n        gzdWestBoundary < mapBounds.getWest() && this.mgrsGridInterval !== 100000\r\n          ? mapBounds.getWest()\r\n          : gzdWestBoundary;\r\n      const effectiveEastBoundary =\r\n        gzdEastBoundary > mapBounds.getEast() && this.mgrsGridInterval !== 100000\r\n          ? mapBounds.getEast()\r\n          : gzdEastBoundary;\r\n      const effectiveNorthBoundary = gzdNorthBoundary > mapBounds.getNorth() ? mapBounds.getNorth() : gzdNorthBoundary;\r\n      const effectiveSouthBoundary = gzdSouthBoundary < mapBounds.getSouth() ? mapBounds.getSouth() : gzdSouthBoundary;\r\n\r\n      // Buffer is used to ensure that if we're right on the GZD boundary that we don't get the adjacent GZD\r\n      const buffer = 0.00001;\r\n      const swCornerUtm = llToUtm(effectiveSouthBoundary + buffer, effectiveWestBoundary + buffer);\r\n      const seCornerUtm = llToUtm(effectiveSouthBoundary + buffer, effectiveEastBoundary - buffer);\r\n      const nwCornerUtm = llToUtm(effectiveNorthBoundary - buffer, effectiveWestBoundary + buffer);\r\n      const neCornerUtm = llToUtm(effectiveNorthBoundary - buffer, effectiveEastBoundary - buffer);\r\n\r\n      let startingEasting = this.map.getCenter().lat >= 0 ? swCornerUtm.easting : nwCornerUtm.easting;\r\n      let finalEasting = this.map.getCenter().lat >= 0 ? seCornerUtm.easting : neCornerUtm.easting;\r\n\r\n      // Since northings are not perfectly horizontal, we need to find the 'largest' northing value\r\n      // in order to make sure that the entire screen has a grid over it\r\n      let startingNorthing = swCornerUtm.northing > seCornerUtm.northing ? seCornerUtm.northing : swCornerUtm.northing;\r\n      let finalNorthing = nwCornerUtm.northing > neCornerUtm.northing ? nwCornerUtm.northing : neCornerUtm.northing;\r\n\r\n      startingEasting = Math.floor(startingEasting / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n      finalEasting = Math.ceil(finalEasting / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n      startingNorthing = Math.floor(startingNorthing / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n      finalNorthing = Math.ceil(finalNorthing / this.mgrsGridInterval) * this.mgrsGridInterval;\r\n\r\n      let eastingArray = [];\r\n      for (let i = startingEasting; i <= finalEasting; i += this.mgrsGridInterval) {\r\n        eastingArray.push(i);\r\n      }\r\n\r\n      let northingArray = [];\r\n      for (let i = startingNorthing; i <= finalNorthing; i += this.mgrsGridInterval) {\r\n        northingArray.push(i);\r\n      }\r\n\r\n      let zoneLetter = nwCornerUtm.zoneLetter;\r\n      let zoneNumber = nwCornerUtm.zoneNumber;\r\n\r\n      // Lines of constant Eastings\r\n\r\n      eastingArray.forEach((eastingElem, eastingIndex, eastArr) => {\r\n        let initialPlacementCompleted = false;\r\n        ctx.beginPath();\r\n        northingArray.forEach((northingElem, northingIndex, northArr) => {\r\n          let gridIntersectionLl = utmToLl(eastingElem, northingElem, zoneNumber, zoneLetter);\r\n\r\n          // The grid array is larger than the GZD.  As such the first and last elements of the easting/northing\r\n          // arrays will be outside of the GZD.  These points are required because they are used to derive the\r\n          // point of intersection with the GZD boundary.\r\n          if (gridIntersectionLl.lng > gzdEastBoundary) {\r\n            return;\r\n          } else if (gridIntersectionLl.lng < gzdWestBoundary) {\r\n            return;\r\n          }\r\n          // This block will truncate the line at the southern boundary of the GZD\r\n          if (gridIntersectionLl.lat < gzdSouthBoundary) {\r\n            let nextIntersectionLl = utmToLl(eastingElem, northArr[northingIndex + 1], zoneNumber, zoneLetter);\r\n            gridIntersectionLl = connectToGzdBoundary(gridIntersectionLl, nextIntersectionLl, 'North');\r\n            // This block will truncate the line at the northern boundary of the GZD\r\n          } else if (gridIntersectionLl.lat > gzdNorthBoundary) {\r\n            let previousIntersectionLl = utmToLl(eastingElem, northArr[northingIndex - 1], zoneNumber, zoneLetter);\r\n            gridIntersectionLl = connectToGzdBoundary(gridIntersectionLl, previousIntersectionLl, 'South');\r\n          }\r\n          let gridIntersectionXy;\r\n          if (Number.isFinite(gridIntersectionLl.lat) && Number.isFinite(gridIntersectionLl.lng)) {\r\n            gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n            if (!initialPlacementCompleted) {\r\n              ctx.moveTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n              initialPlacementCompleted = true;\r\n            } else {\r\n              ctx.lineTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n            }\r\n          } else {\r\n            return;\r\n          }\r\n        });\r\n        const notHkLine = eastingElem % 100000 !== 0;\r\n        this._drawLine(ctx, notHkLine);\r\n      });\r\n\r\n      // Lines of constant Northings\r\n      northingArray.forEach((northingElem, northingIndex, northArr) => {\r\n        let beginPathCalled = false;\r\n        eastingArray.forEach((eastingElem, eastingIndex, eastArr) => {\r\n          let gridIntersectionLl = utmToLl(eastingElem, northingElem, zoneNumber, zoneLetter);\r\n\r\n          // The grid array is larger than the GZD.  As such the first and last elements of the easting/northing\r\n          // arrays will be outside of the GZD.  These points are required because they are used to derive the\r\n          // point of intersection with the GZD boundary.\r\n          if (gridIntersectionLl.lat > gzdNorthBoundary || gridIntersectionLl.lat < gzdSouthBoundary) {\r\n            if (!beginPathCalled) {\r\n              ctx.beginPath();\r\n              beginPathCalled = true;\r\n            }\r\n            return;\r\n          }\r\n          // Need to check to see whether the next point will be inside the GZD if the current point isn't.\r\n          // From there we can truncate the first point so it's on the boundary.\r\n          let gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n          if (!beginPathCalled) {\r\n            // Truncate the line to the effective western boundary\r\n            if (gridIntersectionLl.lng < effectiveWestBoundary) {\r\n              const nextGridIntersectionLl = utmToLl(eastArr[eastingIndex + 1], northingElem, zoneNumber, zoneLetter);\r\n              // If the next intersection isn't inside the boundary, return and try again on the\r\n              // next iteration\r\n              if (nextGridIntersectionLl.lng < effectiveWestBoundary) {\r\n                return;\r\n              }\r\n              const slope = getLineSlope(gridIntersectionLl, nextGridIntersectionLl);\r\n\r\n              try {\r\n                gridIntersectionLl.lat = getAdjustedLatitude(slope, effectiveWestBoundary, gridIntersectionLl);\r\n\r\n                gridIntersectionLl.lng = effectiveWestBoundary;\r\n\r\n                gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n              } catch (e) {\r\n                console.error(e);\r\n                console.trace();\r\n              }\r\n            }\r\n            ctx.beginPath();\r\n            beginPathCalled = true;\r\n            ctx.moveTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n          } else {\r\n            // Truncate the line to the effective eastern boundary\r\n            if (gridIntersectionLl.lng > effectiveEastBoundary) {\r\n              const previousGridIntersectionLl = utmToLl(\r\n                eastArr[eastingIndex - 1],\r\n                northingElem,\r\n                zoneNumber,\r\n                zoneLetter\r\n              );\r\n              const slope = getLineSlope(gridIntersectionLl, previousGridIntersectionLl);\r\n\r\n              try {\r\n                gridIntersectionLl.lat = getAdjustedLatitude(slope, effectiveEastBoundary, gridIntersectionLl);\r\n\r\n                gridIntersectionLl.lng = effectiveEastBoundary;\r\n\r\n                gridIntersectionXy = this.map.latLngToContainerPoint(gridIntersectionLl);\r\n              } catch (e) {\r\n                console.error(e);\r\n                console.trace();\r\n              }\r\n            }\r\n            ctx.lineTo(gridIntersectionXy.x, gridIntersectionXy.y);\r\n          }\r\n        });\r\n\r\n        const notHkLine = northingElem % 100000 !== 0;\r\n        this._drawLine(ctx, notHkLine);\r\n      });\r\n      // Draw the labels\r\n      if (this.mgrsGridInterval === 100000) {\r\n        eastingArray.forEach((eastingElem, eastingIndex, ea) => {\r\n          northingArray.forEach((northingElem, northingIndex, na) => {\r\n            let labelLl;\r\n            let currentLl = utmToLl(eastingElem, northingElem, zoneNumber, zoneLetter);\r\n            let adjacentLlNorthing;\r\n            let adjacentLlEasting;\r\n\r\n            if (ea[eastingIndex + 1]) {\r\n              adjacentLlEasting = utmToLl(ea[eastingIndex + 1], northingElem, zoneNumber, zoneLetter);\r\n\r\n              if (adjacentLlEasting.lng > effectiveEastBoundary) {\r\n                const slope = getLineSlope(currentLl, adjacentLlEasting);\r\n                adjacentLlEasting.lat = getAdjustedLatitude(slope, effectiveEastBoundary, adjacentLlEasting);\r\n                adjacentLlEasting.lng = effectiveEastBoundary;\r\n              }\r\n            } else {\r\n              return; // don't care about the very last index\r\n            }\r\n\r\n            if (na[northingIndex + 1]) {\r\n              // The west-most HK label would be at a lower latitude than the adjacent east-most HK label.\r\n              // This is because the currentLl has been adjusted to be inside the GZD and as such the easting\r\n              // line needs to be adjusted too.  Rather than doing this, use the next northing in the adjacent\r\n              // easting line.\r\n              if (eastingIndex === 0) {\r\n                adjacentLlNorthing = utmToLl(ea[eastingIndex + 1], na[northingIndex + 1], zoneNumber, zoneLetter);\r\n              } else {\r\n                adjacentLlNorthing = utmToLl(eastingElem, na[northingIndex + 1], zoneNumber, zoneLetter);\r\n              }\r\n            } else {\r\n              return; // don't care about the very last index\r\n            }\r\n\r\n            // Boundary check\r\n            if (currentLl.lng < effectiveWestBoundary) {\r\n              const slope = getLineSlope(currentLl, adjacentLlEasting);\r\n              currentLl.lat = getAdjustedLatitude(slope, effectiveWestBoundary, currentLl);\r\n              currentLl.lng = effectiveWestBoundary;\r\n            } else if (currentLl.lng > effectiveEastBoundary) {\r\n              return; // don't care if the cursor is outside the effective bounds\r\n            }\r\n\r\n            labelLl = {\r\n              lat: (currentLl.lat + adjacentLlNorthing.lat) / 2,\r\n              lng: (currentLl.lng + adjacentLlEasting.lng) / 2,\r\n            };\r\n\r\n            try {\r\n              const effectiveBounds = L.latLngBounds(\r\n                L.latLng(effectiveNorthBoundary, effectiveWestBoundary),\r\n                L.latLng(effectiveSouthBoundary, effectiveEastBoundary)\r\n              );\r\n\r\n              if (labelLl && effectiveBounds.contains(labelLl)) {\r\n                let labelText = llToMgrs([labelLl.lng, labelLl.lat]).match(MGRS_REGEX)[HK_INDEX];\r\n                if (\r\n                  this.map\r\n                    .latLngToContainerPoint(L.latLng(currentLl))\r\n                    .distanceTo(this.map.latLngToContainerPoint(L.latLng(adjacentLlEasting))) <\r\n                  ctx.measureText(labelText).width * 2\r\n                ) {\r\n                  return;\r\n                }\r\n\r\n                drawLabel(\r\n                  ctx,\r\n                  labelText,\r\n                  this.options.gridFontColor,\r\n                  this.options.hkColor,\r\n                  this.map.latLngToContainerPoint(labelLl)\r\n                );\r\n              }\r\n            } catch (e) {\r\n              return;\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        eastingArray.forEach((eastingElem, eastingIndex, ea) => {\r\n          if (!(eastingIndex === 0 || eastingIndex === ea.length - 1)) {\r\n            let labelXy;\r\n            try {\r\n              let labelLl = utmToLl(eastingElem, northingArray[1], zoneNumber, zoneLetter);\r\n\r\n              labelXy = this.map.latLngToContainerPoint({ lat: effectiveSouthBoundary, lng: labelLl.lng });\r\n            } catch (e) {\r\n              return;\r\n            }\r\n\r\n            let labelText = this._getLabelText(eastingElem);\r\n\r\n            drawLabel(ctx, labelText, this.options.gridFontColor, this.options.gridColor, {\r\n              x: labelXy.x,\r\n              y: labelXy.y - 15,\r\n            });\r\n          }\r\n        });\r\n\r\n        northingArray.forEach((northingElem, northingIndex, na) => {\r\n          let labelXy;\r\n          try {\r\n            let labelLl = utmToLl(eastingArray[eastingArray.length - 1], northingElem, zoneNumber, zoneLetter);\r\n\r\n            labelXy = this.map.latLngToContainerPoint({ lat: labelLl.lat, lng: effectiveEastBoundary });\r\n          } catch (e) {\r\n            return;\r\n          }\r\n\r\n          let labelText = this._getLabelText(northingElem);\r\n\r\n          drawLabel(ctx, labelText, this.options.gridFontColor, this.options.gridColor, {\r\n            x: labelXy.x - 15,\r\n            y: labelXy.y,\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport { MgrsGraticule };\r\n","import React from 'react';\r\nimport { LayerGroup, LayersControl, MapContainer, TileLayer } from 'react-leaflet';\r\nimport { MgrsGraticule } from 'react-leaflet-mgrs-graticule';\r\nimport './App.css';\r\n\r\n// Assigning the same name to the overlay as it's named in the control box\r\n// makes it much easier to toggle it on and off when multiple overlays\r\n// are employed.\r\nconst mgrsGraticuleName = 'MGRS';\r\n// Controls whether the overlay is displayed on map load\r\nconst overlayEnabled = true;\r\nfunction App() {\r\n  return (\r\n    <MapContainer\r\n      center={[45.4, -75.7]}\r\n      zoom={7}\r\n      minZoom={3}\r\n      maxZoom={16}\r\n      maxNativeZoom={15}\r\n      maxBounds={[\r\n        [-90, -180],\r\n        [90, 180],\r\n      ]}\r\n    >\r\n      <LayersControl position=\"topright\">\r\n        <LayersControl.BaseLayer checked name=\"ESRI Satellite\">\r\n          <TileLayer\r\n            url=\"https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\r\n            attribution='&copy; <a href=\"https://wiki.openstreetmap.org/wiki/Esri\"></a> contributors'\r\n          />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.BaseLayer name=\"ESRI Clarity\">\r\n          <TileLayer\r\n            url=\"https://clarity.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\r\n            attribution='&copy; <a href=\"https://wiki.openstreetmap.org/wiki/Esri\"></a> contributors'\r\n          />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.BaseLayer name=\"OSM\">\r\n          <TileLayer\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.BaseLayer name=\"OSM Topo\">\r\n          <TileLayer url=\"https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\" attribution=\"OSM\" />\r\n        </LayersControl.BaseLayer>\r\n        <LayersControl.Overlay checked={overlayEnabled} name={mgrsGraticuleName}>\r\n          <LayerGroup>\r\n            <MgrsGraticule name={mgrsGraticuleName} checked={overlayEnabled} />\r\n          </LayerGroup>\r\n        </LayersControl.Overlay>\r\n      </LayersControl>\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}